(** {1 Library of sequential functions and their properties} *)


(** {2 On Integers} *)

module Int63
  
(* FROM THE DOCUMENTATION. FIXME *)
  use int.Int
  use export mach.int.Int63
  

  let function min (x y: int63) : int63
    ensures { result = if x <= y then x else y }
  = if x <= y then x else y

  let function max (x y: int63) : int63
    ensures { result = if x >=  y then x else y }
  = if x >= y then x else y

  (* FIXME utilisation dans les contrats *)
  let function add63(x y : int63) : int63 
  requires { [@expl:integer overflow] (to_int x + to_int y) >= min_int63 }
  requires { [@expl:integer overflow] (to_int x + to_int y) <= max_int63 }
  ensures{ result = x + y }
  ensures{ result = y + x }
  = x + y
  
  
end

(** {2 Basic Algebra} *)

module Algebra
  use list.List
  use list.Length
  use list.NthNoOpt
  use int.Int
  use Int63

  predicate associative63 (inv : 'a -> bool) (op: 'a->'a->'a) = 
    forall x y z:'a. inv x -> inv y -> inv z -> 
                     inv (op (op x y) z) -> inv (op x (op y z)) ->
      op x (op y z) = op (op x y) z
  
  predicate neutral (inv: 'a->bool) (op: 'a->'a->'a) (e: 'a) =
    (forall x:'a. inv x -> op x e = x) /\ 
    (forall x:'a. inv x -> op e x = x)
    
  predicate preserves (inv: 'a->bool) (op: 'a->'a->'a) = 
    forall x y : 'a. inv x -> inv y -> inv (op x y)

  predicate satisfies (inv: 'a->bool) (l: list 'a) = 
    forall i:int63. 0 <= to_int i < (length l) <= max_int63 -> inv (nth i l)
    
  lemma tail_satisfies_aux :
    forall inv: 'a->bool, x:'a, xs: list 'a, i:int63.  
      (0 <= to_int i < length xs /\ length xs <= max_int63) -> 
      inv(nth i xs) = inv(nth (add63 i (1:int63)) (Cons x xs))
    
  lemma tail_satisfies:
    forall inv: 'a ->bool, x:'a, xs: list 'a. 
    length xs + 1 <= max_int63 /\ satisfies inv (Cons x xs)
    -> satisfies inv xs

  lemma max_assoc: associative63 (fun (_:int63)->true) max
 
  (* TODO : pas la main sur les trois opérandes pour pouvoir borner le résultat *)
  lemma add_assoc: associative63 (fun (x :int63)-> min_int63 <= x <= max_int63) add63
  
  lemma add_neutral: neutral (fun (_:int63)->true) add63 zero

  lemma max_add_distr: forall x y z: int63. 
      min_int63 <= to_int x + to_int y <= max_int63 
      /\ min_int63 <= to_int x + to_int z + to_int y <= max_int63 ->
      add63 x (max y z) = max (add63 x y) (add63 x z)

  
  
end

(** {2 The option Type} *)

module Option
  use export option.Option

  val function remove_option(opt: option 'a) : 'a   

  axiom remove_option: forall x: 'a. remove_option(Some x) = x
end

(** {2 Projections on pairs} *)

module Pair

  (** [fst (x,y) = x] *)
  let function fst (v : ('a, 'b)) : 'a 
  = match v with 
    | (x, _) -> x
    end

  (** [snd (x,y) = y] *)
  let function snd (v : ('a, 'b)) : 'b
  = match v with 
    | (_, y) -> y
    end

end

(** {2 Lists} *)

(** {3 Basic definitions, properties and notation for lists} *)

module ListBasic 
  use export list.List 
  use export list.Length
  use export list.NthNoOpt
  use Int63
    
  (** An alias for the non-optional [nth] in list.NthNoOpt. *)
  function ([]) (l : list 'a) (i : int63) : 'a = nth i l
  
end

(** {3 List extensionality} *)

module ListExtensionality 
  use ListBasic
  use int.Int
  use Int63

  let rec lemma extensionality (l l': list 'a)
     requires { length l = length l'}
     requires { length l <= max_int63 }
     requires { length l' <= max_int63 }
     requires { forall i: int63. 0 <= i < length l -> l[i] = l'[i] }
     ensures { l = l' }
     variant { l }
  = match l with 
    | Nil -> ()
    | Cons _ xs -> 
      match l' with 
      | Nil -> absurd 
      | Cons _ ys -> 
        let _ = assert { forall i:int63. 0 <= (to_int i) < length xs ->
         xs[i]=l[add63 i (1:int63)] } in
        extensionality xs ys
      end
    end  
    
end


(** {3 Append} *)

module ListAppend 
  use export list.Append
  use ListBasic
  use Algebra
  use Int63
  use int.Int
  
  lemma app_cons: 
    forall x : 'a,  xs ys: list 'a. 
      (Cons x xs) ++ ys = Cons x (xs++ys)  
      
  let rec lemma app_satisfies (inv: 'a->bool)(l1 l2: list 'a)
    requires { length (l1++l2) <= max_int63 }
    requires { satisfies inv l1 }
    requires { satisfies inv l2 }
    ensures { satisfies inv (l1++l2) } 
  = match l1 with 
    | Nil -> ()
    | Cons _ xs -> app_satisfies inv xs l2
    end   
    
  lemma app_assoc: 
    associative63 (fun (_:list 'a)->true) (++)

  lemma app_neutral: 
    neutral (fun (_:list 'a) -> true) (++) Nil

  let rec lemma nth_append_left (l1 l2: list 'a) (i: int63)
    requires { 0 <= i < length l1 }
    requires { length (l1++l2) <= max_int63 }
    ensures { (l1++l2)[i] = l1[i] }
  = match l1 with
    | Nil -> ()
    | Cons _ xs ->
      if i = 0
      then ()
      else nth_append_left xs l2 (i-1)
    end
	  
	   (*FIXME passage de l'indice en type int ?*)
  (*let rec lemma nth_append_right (l1 l2: list 'a) (i: int63)
    requires { length l1 <= i < length (l1++l2) }
    requires { length (l1++l2) <= max_int63 }
    ensures { (l1++l2)[i] = l2[i-(length l1)] }
  = match l1 with 
	  | Nil -> ()
	  | Cons _ xs -> 
	    if i = 0 
	    then ()
	    else nth_append_right xs l2 (i-1)
	  end*)

end

(** {3 Init and applications} *)
  
module ListInit
  use ListBasic
  use ListAppend
  use Int63
  use int.Int

  let rec function init_aux (start: int63) (size:int63) (f : int63 ->'a) : list 'a
    ensures { min_int63 <= size <= max_int63 }
    (*ensures { forall i:int63. 0 <= to_int i < length result -> result[i] = f (((start+i):int63)) }*)
    ensures { length result = max (0:int63) size } 
    variant { size }
  = if size <= 0 
    then Nil 
    else Cons (f start) (init_aux (start+1) (size-1) f)

  (** [init size f] creates a list of length [size] such that its element at 
      position [n] with [0 <= n < size] is [(f n)]. *)
  let rec function init (size:int63) (f : int63 ->'a) : list 'a 
    requires { 0 <= size < max_int63 } 
    ensures { forall i:int63. 0 <= i < length result -> result[i] = f i }
    ensures { length result = max (0:int63) size } 
  = init_aux 0 size f

  (** [from_to n1 n2] creates the list [n1;...;n2]. *) 
  let rec function from_to (start : int63) (finish : int63) : list int63 
    requires { min_int63 <= start <= max_int63 }
    requires { min_int63 <= finish <= max_int63 }
    requires { min_int63 <= finish-start}
    ensures { start > finish -> length result = 0 }
    ensures { start <= finish -> length result = finish - start + 1 }
    ensures { forall i:int63. 0 <= i < length result -> result[i] = start + i }
    variant { finish - start }
  = init_aux start (finish-start+1) (fun i->i)

   let rec lemma from_to_succ (start finish: int63)
    requires { start <= finish } 
    ensures { from_to start finish = 
              (from_to start (add63 finish (-1:int63))) ++ Cons finish Nil }
    variant { finish - start }
  = if finish <= start
    then ()
    else from_to_succ (add63 start (1:int63)) finish 

end

(** {3 Rev} *)

(*module ListRev
  use ListBasic
  use ListAppend
  use Int
  
  let rec rev_aux (xs acc: list 'a) : list 'a 
    requires { length xs + length acc < max_int63 }
    ensures { length result = length xs + length acc }
    ensures { forall i:int63. 0 <= i < length xs -> 
                        result[i] = xs[length xs - 1 - i] }
    ensures { forall i:int63. 0 <= i < length acc -> 
                        result[length xs + i] = acc[i] }
    variant { xs }
  = match xs with 
    | Nil -> acc
    | Cons x' xs' -> 
      assert { forall i:int63. 0 <= i < length acc -> 
                        acc[i] = (Cons x' acc)[i+1] };
      rev_aux xs' (Cons x' acc)
    end 
    
  let rec rev (xs: list 'a) : list 'a 
    ensures { length result = length xs }
    ensures { forall i:int. 0 <= i < length xs -> 
                        result[i] = xs[length xs - 1 - i] }
  = rev_aux xs Nil 
 
end *)
 
(** {3 Map} *)

module ListMap
  use ListBasic
  use ListAppend
  use int.Int
  use Int63

  (** [map f [x1;...;xn]] = [f x1;...;f xn] *) 
  (* FIXME besoin d'un lemme pour encadrer f ? *)
  let rec function map (f: 'a -> 'b) (xs: list 'a) : list 'b 
    requires { length xs <= max_int63 }
    ensures { length result = length xs }
    ensures { forall i:int63. 0 <= to_int i < length xs < max_int63 -> result[i] = f (xs[i]) }
    variant { xs }
  = match xs with 
    | Nil -> Nil
    | Cons x xs -> Cons (f x) (map f xs)
    end
    
  let rec lemma map_ext (f g: 'a->'b)(xs: list 'a) 
    requires { forall x: 'a. f x = g x }
    requires { length xs <= max_int63 }
    ensures { map f xs = map g xs } 
  = match xs with 
    | Nil -> ()
    | Cons _ xs -> map_ext f g xs
    end

  let rec lemma map_map (f: 'b->'c) (g: 'a->'b) (l: list 'a)
    requires { length l < max_int63 }
    ensures { map f (map g l) = map (fun x->f(g x)) l }
  = match l with 
    | Nil -> ()
    | Cons _ xs -> map_map f g xs
    end

  let rec lemma map_app (f:'a->'b) (l1 l2: list 'a)
    requires { length l1 + length l2 < max_int63 }
    ensures { map f (l1++l2) = (map f l1)++(map f l2) }
  = match l1 with 
    | Nil -> ()
    | Cons _ xs -> map_app f xs l2
    end
    
  lemma map_cons: 
    forall f:'a ->'b, x : 'a,  xs : list 'a. length xs < max_int63 
    -> map f (Cons x xs) = Cons (f x)(map f xs)

end 

(*(** {3 Tail recursive map } *)

module ListTailRecMap
  use ListBasic
  use ListMap
  use ListRev
  use ListExtensionality
  use Int
  
  let rec function map_aux (f: 'a -> 'b)(xs: list 'a)(acc: list 'b) : list 'b 
    ensures { length result = length xs + length acc }
    ensures { forall i:int. 0 <= i < length xs -> 
                        result[i] = f (xs[length xs - 1 - i]) }
    ensures { forall i:int. 0 <= i < length acc -> 
                        result[length xs + i] = acc[i] }
    variant { xs }
  = match xs with 
    | Nil -> acc
    | Cons x' xs' -> 
      assert { forall i:int. 0<=i<length acc -> 
                        acc[i] = (Cons (f x') acc)[i+1] };
      map_aux f xs' (Cons (f x') acc)
    end 
    
  let function map' (f: 'a -> 'b)(xs: list 'a) : list 'b 
    ensures { length result = length xs }
    ensures { forall i:int. 0 <= i < length xs -> result[i] = f (xs[i]) }
  = rev(map_aux f xs Nil)
  
  lemma map'_map:
    forall f: 'a -> 'b, xs: list 'a.
    map f xs = map' f xs
  
end

(** {3 Map2} *)

module ListMap2
  use ListBasic
  use Int63
  
  (** [map2 f [x1;...;xn][y1;...;yn] = [f x1 y1;...;f xn yn] *) 
  let rec function map2 (f: 'a->'b->'c) (xs: list 'a) (ys: list 'b) : list 'c
    ensures { length result = min (length xs) (length ys) }
    ensures { forall i:int63. 0 <= to_int i < length result -> result[i] = f (xs[i])(ys[i]) }
    variant { xs }
  = match xs, ys with 
    | Nil, _ -> Nil
    | _, Nil -> Nil
    | Cons x xs, Cons y ys -> Cons (f x y) (map2 f xs ys)
    end

end*)

(** {3 Map3}

module ListMap3
  use ListBasic
  use Int
  
  let rec function map3 (f: 'a->'b->'c->'d) (xs: list 'a) (ys: list 'b) (zs: list 'c) : list 'd
    ensures { length result = min (length xs) (min (length ys) (length zs)) }
    ensures { forall i:int. 0 <= i < length result -> result[i] = f (xs[i])(ys[i])(zs[i]) }
    variant { xs }
  = match xs, ys, zs with 
    | Nil, _, _ -> Nil
    | _, Nil, _ -> Nil
    | _, _, Nil -> Nil
    | Cons x xs, Cons y ys, Cons z zs -> Cons (f x y z) (map3 f xs ys zs)
    end
  
end*)

(** {3 Folds} *)

module ListFold
  use ListBasic
  use ListAppend

  let rec function fold_left (f: 'a ->'b->'a) (e: 'a) (xs: list 'b) : 'a
    variant { xs } 
  = match xs with 
    | Nil -> e
    | Cons x xs -> fold_left f (f e x) xs 
    end 
    
  let rec lemma fold_left_app (op: 'a->'a->'a) (e: 'a)
    (l1 l2: list 'a)
    ensures { fold_left op e (l1++l2) = 
              fold_left op (fold_left op e l1) l2 } 
  = match l1 with 
    | Nil -> ()
    | Cons x xs -> fold_left_app op (op e x) xs l2
    end 
    
end

(** {3 Folds when the operator forms a monoid} *)

module ListFoldMonoid
  use list.Append
  use ListFold  
  use ListBasic
  use Algebra
  use Int63
  use int.Int
    
  (*let rec lemma fold_left_inv (inv:'a->bool)(op:'a->'a->'a)(x:'a)(xs: list 'a)
    requires { inv x /\ forall i:int63. 0 <= to_int i < length xs ->inv (xs[i]) }
    requires { preserves inv op }
    ensures { inv (fold_left op x xs) }
  = match xs with 
    | Nil -> ()
    | Cons x' xs' -> 
        let _ = assert { forall i:int63. 0 <= to_int i < length xs'-> xs'[i] = xs[i+1] } in
        fold_left_inv inv op (op x x') xs' 
    end  *)
    
  let rec lemma fold_left_preserves     
    (inv:'a->bool)(op:'a->'a->'a)(a:'a)(l: list 'a)
    requires { inv a /\ satisfies inv l }
    requires { length l <= max_int63 }
    requires { preserves inv op }
    ensures { inv (fold_left op a l) } 
  = match l with 
    | Nil -> ()
    | Cons x xs -> fold_left_preserves inv op (op x a) xs
    end
       
  (*let rec lemma fold_left_prop (inv:'a->bool)(op:'a->'a->'a)(a b:'a)
    (l: list 'a)
    requires { inv a /\ inv b /\ satisfies inv l }
    requires { associative inv op }
    requires { preserves inv op }
    ensures  { fold_left op (op a b) l = op a (fold_left op b l) }
  = match l with
    | Nil -> ()
    | Cons x xs ->
      assert { forall i:int. 0<=i<length xs -> xs[i] = l[i+1] };
      fold_left_prop inv op (op a b) x xs;
      fold_left_prop inv op b x xs 
    end*)
  
  (*let lemma fold_left_app_prop
    (x:list 'a) (xs:list(list 'a)) 
    ensures { fold_left (++) (x ++ Nil) xs =
              x ++ fold_left (++) Nil xs } 
  = fold_left_prop (fun _->true) (++) x Nil xs*)
  
end

(** {3 Flatten} *)

(*module ListFlatten
  use ListBasic
  use ListFold
  use ListFoldMonoid
  use ListAppend
  use ListMap
  use Algebra
  use Int63 
  use int.Int

  let function flatten (l:list(list 'a)) : list 'a = 
    fold_left (++) Nil l
    
  (*let rec lemma flatten_satisfies (inv: 'a->bool) 
    (ll: list(list 'a)) 
    requires { length l1 <= max_int63 }
    requires { forall i:int63. 0 <= to_int i < length ll -> 
                        satisfies inv (ll[i]) }
    ensures { satisfies inv (flatten ll) } 
  = match ll with 
    | Nil -> ()
    | Cons l ll' -> 
      let _ = assert { flatten ll = l ++ flatten ll' } in 
      let _ = assert { forall i:int63. 0 <= i < length ll' -> 
                                satisfies inv (ll'[i]) = 
                                satisfies inv (ll[i+1]) } in
      flatten_satisfies inv ll';
      let _ = assert { satisfies inv (flatten ll') } in
      let _ = assert { satisfies inv l } in
      ()
    end *)
        
  let rec lemma flatten_cons (x: list 'a)(xs: list(list 'a))
    ensures { flatten(Cons x xs) = x ++ (flatten xs) }
  = fold_left_app_prop x xs
  
  let rec lemma flatten_map (f:'a ->'b)(l:list(list 'a))  
    ensures { flatten(map (map f) l) = map f (flatten l) }
  = match l with 
    | Nil -> ()
    | Cons _ xs -> flatten_map f xs
    end
    
  let rec lemma flatten_app (l1 l2:list(list 'a))  
    ensures { flatten (l1 ++ l2) = (flatten l1) ++ (flatten l2) }
  = match l1 with 
    | Nil -> ()
    | Cons _ xs -> flatten_app xs l2
    end
    
  lemma flatten_fequal:
    forall l1 l2: list(list 'a). 
      l1 = l2 -> flatten l1 = flatten l2
    
  let rec lemma fold_left_flatten (inv: 'a->bool)
    (op: 'a->'a->'a) (e:'a)(ll: list(list 'a))
    requires { associative inv op }
    requires { neutral inv op e }
    requires { preserves inv op }
    requires { inv e }    
    requires { satisfies (satisfies inv) ll }
    ensures { fold_left op e (flatten ll) = 
              fold_left op e (map (fun l->fold_left op e l) ll) }
  = match ll with 
    | Nil -> ()
    | Cons l ls -> 
        tail_satisfies (satisfies inv) l ls;
        let ghost function f l = fold_left op e l in
        let ghost a = fold_left op e l in
        flatten_cons l ls;
        fold_left_prop inv op a e (flatten ls);
        fold_left_flatten inv op e ls;
        fold_left_prop inv op a e (map f ls)
    end

end

(** {3 Sum of a list of integers} *)

module ListSum
  use ListBasic
  use ListFold
  use ListFoldMonoid
  use ListAppend
  use Int
  
  (* tous les entiers sont compris entre max_int/n min_int/n où n est le nombre d'éléments *)
  (* somme en int ne dépasse pas max_int63 *)
  let function sum (l: list int) : int = 
    fold_left (+) 0 l
    
  let lemma sum_cons (x:int) (xs: list int) 
    ensures { sum (Cons x xs) = x + sum xs }
  = fold_left_prop (fun (_:int)->true) (+) x 0 xs

  let rec lemma sum_app (l1 l2: list int)
    ensures { sum(l1++l2) = sum l1 + sum l2 }
  = match l1 with 
    | Nil -> ()
    | Cons _ xs -> sum_app xs l2 
    end

end *)   
    
(** {3 Maximum of a non-empty list of integers} *)

module ListMaximum 
  use ListBasic
  use ListFold
  use ListFoldMonoid
  use Algebra
  use Int63
  use int.Int

  let rec function maximum (l : list int63) : int63 
    requires { max_int63 >= length l > 0 } 
    variant { l }
  = match l with 
    | Nil -> absurd
    | Cons h Nil -> h 
    | Cons h t -> max h (maximum t)
    end  
        
  lemma maximum_cons:
    forall x: int63, xs: list int63.
    max_int63 >= length xs > 0 ->
    maximum (Cons x xs) = max x (maximum xs)

end  

(** {3 Homomorphisms and the first homomorphism theorem} *)
 
module ListFirstHomomorphismTheorem
  use ListBasic
  use ListAppend
  use ListMap
  use ListFold
  
  (* FIXME : vraiment besoin de changer quelque chose ici ?*)
  
  predicate homomorphic (h: list 'a->'b)(op: 'b->'b->'b) =
    forall l1 l2: list 'a. h(l1++l2) = op(h l1)(h l2)

  let rec lemma fold_left_homomorphic
    (h: list 'a -> 'b)(op: 'b->'b->'b)
    (x:'a) (xs ys: list 'a)
    ensures { 
      fold_left op (op(h (Cons x Nil)) (h ys)) 
        (map (fun x->h(Cons x Nil)) xs) =
      op (h(Cons x Nil))  
        (fold_left op (h ys) (map (fun x->h(Cons x Nil)) xs)) }
  = match xs with 
    | Nil -> ()
    | Cons head tail -> 
        fold_left_homomorphic h op x tail (ys++(Cons head Nil))
    end 
    
  let rec lemma first_homomorphism_theorem 
    (h: list 'a -> 'b)(op: 'b->'b->'b)(l: list 'a)
    requires { homomorphic h op }
    ensures { h l = fold_left op (h Nil) 
                      (map (fun x->h(Cons x Nil)) l) }
  = match l with 
    | Nil -> ()
    | Cons x xs -> 
        fold_left_homomorphic h op x xs Nil;
        first_homomorphism_theorem h op xs
    end

end

(** {3 Firstn and skipn} *)

module ListFirstnSkipn
  use ListBasic
  use ListAppend
  use ListExtensionality
  use Pair
  use Int63
  use int.Int
  
  let rec cut (n: int63) (l: list 'a) : (list 'a, list 'a)
    requires { n <= max_int63 }
    returns { l1, l2 -> l1 ++ l2 = l } 
    (*TODO returns { l1, _ -> length l1 = min (max (0:int63) n) ((length l):int63) }*)
    variant { n }
  = if n <= 0
    then (Nil,l)
    else
      match l with 
      | Nil -> (Nil, Nil)
      | Cons x xs ->
        let (l1,l2) = cut (n-1) xs
        in Cons x l1, l2
      end
	  
  let function firstn (n :int63) (l: list 'a) 
    requires { 0 <= n <= length l }
    ensures { forall i:int63. 0 <= i < n -> l[i] = result [i] } 
    ensures { length result = n } 
  = fst (cut n l)
  
  let function skipn (n :int63) (l: list 'a)
    requires { 0 <= n <= length l }
    (* TODO ensures { forall i:int63. n <= i < length l -> l[i] = result[i-n] }*)
    ensures { length result = length l - n }
  = snd (cut n l)

  let rec lemma firstn_skipn (l: list 'a)(n: int63)
    requires { 0 <= n <= length l }
    ensures { l = (firstn n l ) ++ (skipn n l) }
  = extensionality l ((firstn n l)++(skipn n l))  
  
  let lemma skipn_skipn (n1 n2: int63) (l: list 'a)
    requires { 0 <= n1 /\ 0 <= n2 }
    requires { n1 + n2 <= length l }
    (*ensures { skipn n1 (skipn n2 l) = skipn (n1+n2) l }*)
  = ()
  
end

(** {3 Prefix} *)
  
module ListPrefix
  use ListBasic
  use ListMap
  use Int63
  use int.Int

  let rec function take (n: int63)(l:list 'a) : list 'a 
    (*ensures { length result = max 0 (min n (length l)) }*)
    ensures { forall i:int63. 0 <= i < length result -> 
                        result[i] = l[i] }
    variant { l }
  = if n <= 0 
    then Nil 
    else 
      match l with  
      | Nil -> Nil
      | Cons x xs -> Cons x (take (n-1) xs)
      end

  let rec function prefix (l : list 'a)
    ensures { forall i:int63. 0 <= i <= length l -> 
                result[i] = take i l }
    ensures { length result = 1 + length l }
    variant { l }
  = Cons (Nil) 
         (match l with
          | Nil ->  Nil
          | Cons x xs -> map (fun l->Cons x l) (prefix xs)
          end)
          
  lemma prefix_cons: 
    forall x: int, xs: list int. 
      prefix (Cons x xs) = 
      Cons Nil (map (fun l->Cons x l) (prefix xs))
        
end

(** {3 Filter} *)

module ListFilter
  use ListBasic
  use ListAppend
  
  (* FIXME : besoin de changer quelque chose ? *)

  let rec function filter (p: 'a -> bool) (xs: list 'a) : list 'a 
  = match xs with 
    | Nil -> Nil 
    | Cons x' xs' -> 
      if p x' 
      then Cons x' (filter p xs')
      else filter p xs'
    end

  let rec lemma filter_append (p: 'a->bool)(l1 l2: list 'a) 
    ensures { filter p (l1++l2) = filter p l1 ++ filter p l2 }
  = match l1 with 
    | Nil -> ()   
    | Cons _ xs -> filter_append p xs l2 
    end 

end

(** {3 All on lists} *)

module List
  use export ListBasic
  use export ListExtensionality
  use export ListAppend
  use export ListInit
  (*use export ListRev*)
  use export ListMap
  (*use export ListTailRecMap*)
  use export ListFold
  use export ListFoldMonoid
  (*use export ListFlatten
  use export ListSum
  use export ListMaximum
  use export ListFirstHomomorphismTheorem
  use export ListFirstnSkipn
  use export ListPrefix*)
end
