(** {1 Example: Parallel Maximum Prefix Sum} *)

module MPS 
  use sequential.Int
  use sequential.ListBasic
  use sequential.ListMap
  use sequential.ListAppend
  use sequential.ListMaximum   
  use sequential.ListSum
  use sequential.ListPrefix
  use sequential.ListFirstHomomorphismTheorem
  use sequential.ListFold
  use bsml.BSML
  use stdlib.Base
  use sequential.Pair
  use sequential.Algebra
  use skeletons.Skeletons  
 
  (** {2 Specification } *)

  (** The goal of `mps` functions is to compute the maximum prefix sum of a 
      list. For example, `mps [1; -1; 2; 5; -2; 0; -3; 4] = 7` and this 
      maximum is reached for the prefix `[1; -1; 2; 5]`. *)

  (** A simple but inefficient way to compute the maximum prefix sum is to generate 
      all the prefixes of the given list, compute their sum and finally get the largest 
      of these sums. `mps_spec` implements this simple way and is our specification: *)

  let function mps_spec (l: list int) : int 
  = maximum (map sum (prefix l))

  (** To ease the proof of correctness of `mps_seq` and `mps_par` below, 
      we show that the auxiliary function `ms`, which is the tupling 
      of `mps_spec` and `sum`, is homomorphic with respect to the binary 
      operation `op`. Homomorphic functions can be expressed as a composition 
      of a call to `fold_left` and a call to `map` (with in this case argument 
      functions `op` and `f` respectively) thanks to the first homomorphism 
      theorem stated in {h <a href="sequential.html">sequential.List</a>}. 
      `op` is associative only on the subset of `(int, int)` whose elements 
      satisfy `mps_sum_inv`. `op` preserves this invariant, and `f` 
      establishes it. A few auxiliary lemmas are necessary to prove that 
      `ms` is homomorphic. *)

  function ms (l: list int) : (int,int) 
  = (mps_spec l, sum l)

  let function op (x: (int,int)) (y: (int,int)) : (int, int)
  = (max (max 0 (fst x)) ((snd x)+(fst y)), (snd x)+(snd y)) 

  let function f (x : int) = (max 0 x, x) 

  predicate mps_sum_inv (x: (int,int)) 
  = 0 <= fst x /\ fst x >= snd x

  lemma op_assoc: associative mps_sum_inv op
  
  lemma op_neutral: neutral mps_sum_inv op (0,0)
  
  lemma op_preserves_mps_sum_inv: 
    preserves mps_sum_inv op 
 
  lemma mps_sum_inv_neutral: 
    mps_sum_inv (0,0) 

  lemma f_establishes_mps_sum_inv: 
    forall x:int. mps_sum_inv (f x)
    
  let rec lemma maximum_map_plus (x: int) (xs: list int)
    requires { length xs > 0 }
    ensures { maximum (map (fun y -> x + y) xs) =
              x + maximum xs }
    variant { xs }
  = match xs with 
    | Nil -> absurd 
    | Cons _ Nil -> ()
    | Cons _ xs' -> maximum_map_plus x xs'
    end  

  let lemma mps_spec_cons (x: int) (xs: list int) 
    ensures { mps_spec (Cons x xs) = max 0 (x + mps_spec xs) }
  = prefix_cons x xs;
    maximum_cons 0 (map sum (map (fun l ->Cons x l)(prefix xs)));
    map_map sum (fun l->Cons x l) (prefix xs);
    map_map (fun y->x+y) sum (prefix xs);
    map_ext (fun x1 -> sum (Cons x x1)) 
            (fun (x1:list int) -> x + sum x1) (prefix xs);
    assert { sum Nil = 0 }
    
  let lemma mps_spec_pos (l: list int)
    ensures { mps_spec l >= 0 }
  = match l with 
    | Nil -> ()
    | Cons _ _ -> ()
    end 

  let lemma ms_cons (x: int) (xs: list int) 
    ensures { ms (Cons x xs) = op (f x) (ms xs) }
  = mps_spec_cons x xs;
    sum_cons x xs;
    assert { max (max 0 (max 0 x)) (x + mps_spec xs) = 
             max 0 (x + mps_spec xs ) }
  
  lemma ms_f: forall x:int. ms (Cons x Nil) = f x

  let rec lemma ms_homomorphic (l1 l2: list int) 
    ensures { ms (l1++l2) = op (ms l1) (ms l2) }
  = match l1 with 
    | Nil -> 
        assert { Nil ++ l2 = l2 };
        assert { ms Nil = (0,0) };
        assert { op (0,0) (ms l2) = ms l2 }
    | Cons x xs ->
        app_cons x xs l2;
        ms_homomorphic xs l2;
        ms_cons x (xs++l2);
        assert { op (f x)(op (ms xs) (ms l2)) =
                 op (op (f x)(ms xs)) (ms l2) };
        assert { op (op (f x)(ms xs)) (ms l2) =
                 op (ms (Cons x xs)) (ms l2) };
        assert { ms ((Cons x xs)++l2) =
                 op (ms (Cons x xs)) (ms l2) }
    end 

  (** {2 A sequential implementation} *)

  (** The definitions and lemmas above are enough to verify that 
      `mps_seq` satisfies the specification `mps_spec`. *)

  let function mps_seq (l: list int) : int 
    ensures { result = mps_spec l } 
  = let ghost _ = first_homomorphism_theorem ms op l in
    assert { fold_left op (0, 0) (map f l) = ms l };
    fst (fold_left op (0, 0) (map f l))  

  (** {2 A parallel implementation} *)

  (** The definitions and lemmas above are enough to verify that 
      `mps_par` satisfies the specification `mps_spec`. *)

  let mps_par (dl: par(list int)) : int 
    ensures { result = mps_spec (to_list dl) } 
  = let mapped = map_par f dl in
    fst (reduce_par mps_sum_inv op (0, 0) mapped)  

end