(** {1 Example: Counting the number of elements of a List
                that satisfy a given property *)

module Count
  use sequential.Int
  use sequential.ListBasic
  use sequential.ListMap
  use sequential.ListTailRecMap
  use sequential.ListAppend
  use sequential.ListFilter
  use sequential.ListFirstHomomorphismTheorem
  use sequential.ListFold
  use bsml.BSML
  use stdlib.Base
  use sequential.Pair
  use sequential.Algebra
  use skeletons.Skeletons 

  function count_spec (p:'a ->bool) (l: list 'a) : int
  = length (filter p l)

  (** We parallelize by showing `count_spec` is a homomorphic function. *)

  let function f (p: 'a->bool) (x: 'a) = if p x then 1 else 0
  
  lemma count_spec_f : forall p:'a ->bool, x: 'a. 
    count_spec p (Cons x Nil) = f p x
  
  lemma avg_spec_Nil: forall p: 'a->bool. count_spec p Nil = 0

  lemma count_spec_homomophic: forall p: 'a->bool, l1 l2: list 'a. 
    count_spec p (l1 ++ l2) = (count_spec p l1) + (count_spec p l2)
    
  (** {2 A Sequential Implementation} *)

  let count_seq (p: 'a->bool) (l: list 'a) : int 
    ensures { result = count_spec p l }
  = let ghost _ = first_homomorphism_theorem (count_spec p) (+) l in
    fold_left (+) 0 (map' (f p) l)

  (** {3 A Parallel Implementation} *)

  let count_par (p: 'a->bool) (dl: par (list 'a)) : int 
    ensures { result = count_spec p (to_list dl) }
  = let ghost _ = 
      first_homomorphism_theorem (count_spec p) (+) (to_list dl) in
    reduce_par (fun _->true) (+) 0 (map_par (f p) dl)

end
