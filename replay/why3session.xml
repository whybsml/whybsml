<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="1" name="CVC4" version="1.8" timelimit="2" steplimit="0" memlimit="1000"/>
<prover id="3" name="Alt-Ergo" version="2.5.2" timelimit="2" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="Introduction.mlw"/>
</file>
<file format="whyml" proved="true">
<path name=".."/><path name="bsml.mlw"/>
</file>
<file format="whyml" proved="true">
<path name=".."/><path name="average.mlw"/>
<theory name="Average" proved="true">
 <goal name="avg_spec_f" proved="true">
 <proof prover="3"><result status="valid" time="0.119179" steps="324"/></proof>
 </goal>
 <goal name="avg_spec_Nil" proved="true">
 <proof prover="3"><result status="valid" time="0.117833" steps="275"/></proof>
 </goal>
 <goal name="avg_spec_homomophic" proved="true">
 <proof prover="3"><result status="valid" time="0.085139" steps="138"/></proof>
 </goal>
 <goal name="avg_seq&#39;vc" expl="VC for avg_seq" proved="true">
 <proof prover="1"><result status="timeout" time="2.000000" steps="146735"/></proof>
 <proof prover="3"><result status="valid" time="1.657702" steps="13662"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="avg_seq&#39;vc.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.103893" steps="328"/></proof>
  </goal>
  <goal name="avg_seq&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="1" timelimit="8" memlimit="4000"><result status="timeout" time="8.000000" steps="582673"/></proof>
  <proof prover="3" timelimit="8" memlimit="4000"><result status="timeout" time="8.000000" steps="34872"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="avg_seq&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="1" timelimit="8" memlimit="4000"><result status="valid" time="2.961705" steps="244759"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="avg_par&#39;vc" expl="VC for avg_par" proved="true">
 <proof prover="1"><result status="timeout" time="2.000000" steps="155926"/></proof>
 <proof prover="3"><result status="timeout" time="2.000000" steps="15240"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="avg_par&#39;vc.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.106864" steps="328"/></proof>
  </goal>
  <goal name="avg_par&#39;vc.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.250225" steps="1723"/></proof>
  </goal>
  <goal name="avg_par&#39;vc.2" expl="precondition" proved="true">
  <proof prover="1" timelimit="8" memlimit="4000"><result status="timeout" time="8.000000" steps="692915"/></proof>
  <proof prover="3" timelimit="8" memlimit="4000"><result status="timeout" time="8.000000" steps="33250"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="avg_par&#39;vc.2.0" expl="precondition" proved="true">
   <proof prover="1"><result status="timeout" time="1.683109" steps="129073"/></proof>
   <proof prover="3"><result status="timeout" time="2.000000" steps="13858"/></proof>
   <transf name="split_vc" proved="true" >
    <goal name="avg_par&#39;vc.2.0.0" expl="precondition" proved="true">
    <proof prover="3"><result status="valid" time="0.362460" steps="1587"/></proof>
    </goal>
    <goal name="avg_par&#39;vc.2.0.1" expl="precondition" proved="true">
    <proof prover="3"><result status="valid" time="0.220744" steps="1567"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="avg_par&#39;vc.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.087478" steps="130"/></proof>
  </goal>
  <goal name="avg_par&#39;vc.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.067329" steps="29"/></proof>
  </goal>
  <goal name="avg_par&#39;vc.5" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.095253" steps="151"/></proof>
  </goal>
  <goal name="avg_par&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.687350" steps="70815"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
<file format="whyml" proved="true">
<path name=".."/><path name="count.mlw"/>
<theory name="Count" proved="true">
 <goal name="count_spec_f" proved="true">
 <proof prover="3"><result status="valid" time="0.148835" steps="548"/></proof>
 </goal>
 <goal name="avg_spec_Nil" proved="true">
 <proof prover="3"><result status="valid" time="0.070771" steps="70"/></proof>
 </goal>
 <goal name="count_spec_homomophic" proved="true">
 <proof prover="3"><result status="valid" time="0.121066" steps="299"/></proof>
 </goal>
 <goal name="count_seq&#39;vc" expl="VC for count_seq" proved="true">
 <proof prover="1"><result status="timeout" time="2.000000" steps="130265"/></proof>
 <proof prover="3"><result status="valid" time="1.680726" steps="12376"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="count_seq&#39;vc.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.108540" steps="265"/></proof>
  </goal>
  <goal name="count_seq&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="1" timelimit="8" memlimit="4000"><result status="valid" time="2.855302" steps="243008"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="count_par&#39;vc" expl="VC for count_par" proved="true">
 <proof prover="1"><result status="timeout" time="2.000000" steps="138807"/></proof>
 <proof prover="3"><result status="timeout" time="2.000000" steps="13794"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="count_par&#39;vc.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.116823" steps="265"/></proof>
  </goal>
  <goal name="count_par&#39;vc.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.095924" steps="143"/></proof>
  </goal>
  <goal name="count_par&#39;vc.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.253014" steps="1002"/></proof>
  </goal>
  <goal name="count_par&#39;vc.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.096054" steps="133"/></proof>
  </goal>
  <goal name="count_par&#39;vc.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.065251" steps="32"/></proof>
  </goal>
  <goal name="count_par&#39;vc.5" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.095314" steps="152"/></proof>
  </goal>
  <goal name="count_par&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="3" timelimit="8" memlimit="4000"><result status="valid" time="1.498979" steps="10583"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
<file format="whyml" proved="true">
<path name=".."/><path name="mps.mlw"/>
<theory name="MPS" proved="true">
 <goal name="mps_spec&#39;vc" expl="VC for mps_spec" proved="true">
 <proof prover="3"><result status="valid" time="0.052714" steps="35"/></proof>
 </goal>
 <goal name="op&#39;vc" expl="VC for op" proved="true">
 <proof prover="3"><result status="valid" time="0.046683" steps="12"/></proof>
 </goal>
 <goal name="f&#39;vc" expl="VC for f" proved="true">
 <proof prover="3"><result status="valid" time="0.048112" steps="12"/></proof>
 </goal>
 <goal name="op_assoc" proved="true">
 <proof prover="3"><result status="valid" time="0.299844" steps="1923"/></proof>
 </goal>
 <goal name="op_neutral" proved="true">
 <proof prover="1" timelimit="8" memlimit="4000"><result status="timeout" time="8.000000" steps="850327"/></proof>
 <proof prover="3" timelimit="8" memlimit="4000"><result status="timeout" time="8.000000" steps="36760"/></proof>
 <transf name="inline_goal" proved="true" >
  <goal name="op_neutral.0" proved="true">
  <proof prover="1"><result status="timeout" time="2.000000" steps="119710"/></proof>
  <proof prover="3"><result status="valid" time="2.504498" steps="16719"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="op_neutral.0.0" proved="true">
   <proof prover="3"><result status="valid" time="0.217786" steps="1532"/></proof>
   </goal>
   <goal name="op_neutral.0.1" proved="true">
   <proof prover="3"><result status="valid" time="0.346300" steps="1489"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="op_preserves_mps_sum_inv" proved="true">
 <proof prover="3"><result status="valid" time="0.356867" steps="2319"/></proof>
 </goal>
 <goal name="mps_sum_inv_neutral" proved="true">
 <proof prover="3"><result status="valid" time="0.074074" steps="108"/></proof>
 </goal>
 <goal name="f_establishes_mps_sum_inv" proved="true">
 <proof prover="3"><result status="valid" time="0.088290" steps="173"/></proof>
 </goal>
 <goal name="maximum_map_plus&#39;vc" expl="VC for maximum_map_plus" proved="true">
 <proof prover="1"><result status="timeout" time="2.000000" steps="164770"/></proof>
 <proof prover="3"><result status="timeout" time="2.000000" steps="16140"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="maximum_map_plus&#39;vc.0" expl="unreachable point" proved="true">
  <proof prover="3"><result status="valid" time="0.051215" steps="22"/></proof>
  </goal>
  <goal name="maximum_map_plus&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.119700" steps="232"/></proof>
  </goal>
  <goal name="maximum_map_plus&#39;vc.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.084027" steps="122"/></proof>
  </goal>
  <goal name="maximum_map_plus&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="1"><result status="timeout" time="2.000000" steps="251933"/></proof>
  <proof prover="3"><result status="timeout" time="2.000000" steps="13001"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="maximum_map_plus&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.209585" steps="717"/></proof>
   </goal>
   <goal name="maximum_map_plus&#39;vc.3.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.310485" steps="1128"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mps_spec_cons&#39;vc" expl="VC for mps_spec_cons" proved="true">
 <proof prover="1"><result status="timeout" time="2.000000" steps="158894"/></proof>
 <proof prover="3"><result status="timeout" time="2.000000" steps="9582"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="mps_spec_cons&#39;vc.0" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.107456" steps="261"/></proof>
  </goal>
  <goal name="mps_spec_cons&#39;vc.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.074505" steps="54"/></proof>
  </goal>
  <goal name="mps_spec_cons&#39;vc.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.159621" steps="465"/></proof>
  </goal>
  <goal name="mps_spec_cons&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="1" timelimit="8" memlimit="4000"><result status="timeout" time="8.000000" steps="701759"/></proof>
  <proof prover="3" timelimit="8" memlimit="4000"><result status="timeout" time="8.000000" steps="44759"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="mps_spec_cons&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="1" timelimit="32" memlimit="4000"><result status="valid" time="16.148876" steps="1828586"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mps_spec_pos&#39;vc" expl="VC for mps_spec_pos" proved="true">
 <proof prover="1"><result status="timeout" time="2.000000" steps="177895"/></proof>
 <proof prover="3"><result status="timeout" time="2.000000" steps="12308"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="mps_spec_pos&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.916841" steps="70593"/></proof>
  </goal>
  <goal name="mps_spec_pos&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.082478" steps="142"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ms_cons&#39;vc" expl="VC for ms_cons" proved="true">
 <proof prover="3"><result status="valid" time="0.325787" steps="2224"/></proof>
 </goal>
 <goal name="ms_f" proved="true">
 <proof prover="1"><result status="valid" time="0.934142" steps="91047"/></proof>
 </goal>
 <goal name="ms_homomorphic&#39;vc" expl="VC for ms_homomorphic" proved="true">
 <proof prover="1"><result status="timeout" time="2.000000" steps="146000"/></proof>
 <proof prover="3"><result status="valid" time="1.737556" steps="16286"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="ms_homomorphic&#39;vc.0" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.062375" steps="27"/></proof>
  </goal>
  <goal name="ms_homomorphic&#39;vc.1" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="1.166489" steps="8761"/></proof>
  </goal>
  <goal name="ms_homomorphic&#39;vc.2" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.111746" steps="363"/></proof>
  </goal>
  <goal name="ms_homomorphic&#39;vc.3" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.312064" steps="1094"/></proof>
  </goal>
  <goal name="ms_homomorphic&#39;vc.4" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.075398" steps="60"/></proof>
  </goal>
  <goal name="ms_homomorphic&#39;vc.5" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.051961" steps="32"/></proof>
  </goal>
  <goal name="ms_homomorphic&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.543956" steps="51375"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mps_seq&#39;vc" expl="VC for mps_seq" proved="true">
 <proof prover="1"><result status="timeout" time="2.000000" steps="178183"/></proof>
 <proof prover="3"><result status="timeout" time="2.000000" steps="14670"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="mps_seq&#39;vc.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.118508" steps="328"/></proof>
  </goal>
  <goal name="mps_seq&#39;vc.1" expl="assertion" proved="true">
  <proof prover="1" timelimit="8" memlimit="4000"><result status="valid" time="2.267801" steps="190322"/></proof>
  </goal>
  <goal name="mps_seq&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.089536" steps="145"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mps_par&#39;vc" expl="VC for mps_par" proved="true">
 <proof prover="1"><result status="timeout" time="2.000000" steps="173773"/></proof>
 <proof prover="3"><result status="timeout" time="2.000000" steps="11936"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="mps_par&#39;vc.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.056979" steps="22"/></proof>
  </goal>
  <goal name="mps_par&#39;vc.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.056708" steps="22"/></proof>
  </goal>
  <goal name="mps_par&#39;vc.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.052395" steps="22"/></proof>
  </goal>
  <goal name="mps_par&#39;vc.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.066874" steps="27"/></proof>
  </goal>
  <goal name="mps_par&#39;vc.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.326150" steps="2040"/></proof>
  </goal>
  <goal name="mps_par&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.078096" steps="121"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
<file format="whyml" proved="true">
<path name=".."/><path name="sequential.mlw"/>
<theory name="Int" proved="true">
 <goal name="max&#39;vc" expl="VC for max" proved="true">
 <proof prover="3"><result status="valid" time="0.030109" steps="10"/></proof>
 </goal>
 <goal name="min&#39;vc" expl="VC for min" proved="true">
 <proof prover="3"><result status="valid" time="0.032815" steps="10"/></proof>
 </goal>
</theory>
<theory name="Algebra" proved="true">
 <goal name="tail_satisfies_aux" proved="true">
 <proof prover="3"><result status="valid" time="0.036683" steps="15"/></proof>
 </goal>
 <goal name="tail_satisfies" proved="true">
 <proof prover="1"><result status="valid" time="0.173677" steps="11167"/></proof>
 </goal>
 <goal name="tail_satisfies_head" proved="true">
 <proof prover="3"><result status="valid" time="0.034817" steps="23"/></proof>
 </goal>
 <goal name="max_assoc" proved="true">
 <proof prover="3"><result status="valid" time="0.058043" steps="122"/></proof>
 </goal>
 <goal name="add_assoc" proved="true">
 <proof prover="3"><result status="valid" time="0.033432" steps="16"/></proof>
 </goal>
 <goal name="add_neutral" proved="true">
 <proof prover="3"><result status="valid" time="0.038098" steps="31"/></proof>
 </goal>
 <goal name="max_add_distr" proved="true">
 <proof prover="3"><result status="valid" time="0.038197" steps="46"/></proof>
 </goal>
</theory>
<theory name="ListExtensionality" proved="true">
 <goal name="extensionality&#39;vc" expl="VC for extensionality" proved="true">
 <proof prover="3"><result status="valid" time="0.078154" steps="323"/></proof>
 </goal>
</theory>
<theory name="ListAppend" proved="true">
 <goal name="app_cons" proved="true">
 <proof prover="3"><result status="valid" time="0.037540" steps="10"/></proof>
 </goal>
 <goal name="app_satisfies&#39;vc" expl="VC for app_satisfies" proved="true">
 <proof prover="3"><result status="valid" time="0.079554" steps="209"/></proof>
 </goal>
 <goal name="app_assoc" proved="true">
 <proof prover="3"><result status="valid" time="0.044591" steps="34"/></proof>
 </goal>
 <goal name="app_neutral" proved="true">
 <proof prover="3"><result status="valid" time="0.050822" steps="56"/></proof>
 </goal>
 <goal name="nth_append_left&#39;vc" expl="VC for nth_append_left" proved="true">
 <proof prover="3"><result status="valid" time="0.067531" steps="169"/></proof>
 </goal>
 <goal name="nth_append_right&#39;vc" expl="VC for nth_append_right" proved="true">
 <proof prover="3"><result status="valid" time="0.079254" steps="181"/></proof>
 </goal>
</theory>
<theory name="ListInit" proved="true">
 <goal name="init_aux&#39;vc" expl="VC for init_aux" proved="true">
 <proof prover="3"><result status="valid" time="0.078833" steps="204"/></proof>
 </goal>
 <goal name="init&#39;vc" expl="VC for init" proved="true">
 <proof prover="3"><result status="valid" time="0.049165" steps="28"/></proof>
 </goal>
 <goal name="from_to&#39;vc" expl="VC for from_to" proved="true">
 <proof prover="3"><result status="valid" time="0.078429" steps="225"/></proof>
 </goal>
 <goal name="from_to_succ&#39;vc" expl="VC for from_to_succ" proved="true">
 <proof prover="1"><result status="valid" time="0.334454" steps="22271"/></proof>
 </goal>
</theory>
<theory name="ListRev" proved="true">
 <goal name="rev_aux&#39;vc" expl="VC for rev_aux" proved="true">
 <proof prover="3"><result status="valid" time="0.087625" steps="245"/></proof>
 </goal>
 <goal name="rev&#39;vc" expl="VC for rev" proved="true">
 <proof prover="3"><result status="valid" time="0.046774" steps="55"/></proof>
 </goal>
</theory>
<theory name="ListMap" proved="true">
 <goal name="map&#39;vc" expl="VC for map" proved="true">
 <proof prover="3"><result status="valid" time="0.061791" steps="183"/></proof>
 </goal>
 <goal name="map_ext&#39;vc" expl="VC for map_ext" proved="true">
 <proof prover="3"><result status="valid" time="0.052805" steps="124"/></proof>
 </goal>
 <goal name="map_map&#39;vc" expl="VC for map_map" proved="true">
 <proof prover="3"><result status="valid" time="0.077719" steps="270"/></proof>
 </goal>
 <goal name="map_app&#39;vc" expl="VC for map_app" proved="true">
 <proof prover="3"><result status="valid" time="0.070601" steps="184"/></proof>
 </goal>
 <goal name="map_cons" proved="true">
 <proof prover="3"><result status="valid" time="0.046027" steps="11"/></proof>
 </goal>
</theory>
<theory name="ListMapAlg" proved="true">
 <goal name="map_ext_inv&#39;vc" expl="VC for map_ext_inv" proved="true">
 <proof prover="3"><result status="valid" time="0.064819" steps="203"/></proof>
 </goal>
</theory>
<theory name="ListTailRecMap" proved="true">
 <goal name="map_aux&#39;vc" expl="VC for map_aux" proved="true">
 <proof prover="3"><result status="valid" time="0.463019" steps="3391"/></proof>
 </goal>
 <goal name="map&#39;&#39;vc" expl="VC for map&#39;" proved="true">
 <proof prover="3"><result status="valid" time="0.057980" steps="80"/></proof>
 </goal>
 <goal name="map&#39;_map" proved="true">
 <proof prover="3"><result status="valid" time="0.046480" steps="48"/></proof>
 </goal>
</theory>
<theory name="ListMap2" proved="true">
 <goal name="map2&#39;vc" expl="VC for map2" proved="true">
 <proof prover="3"><result status="valid" time="0.113054" steps="513"/></proof>
 </goal>
</theory>
<theory name="ListMap3" proved="true">
 <goal name="map3&#39;vc" expl="VC for map3" proved="true">
 <proof prover="3"><result status="valid" time="0.335669" steps="1964"/></proof>
 </goal>
</theory>
<theory name="ListFold" proved="true">
 <goal name="fold_left&#39;vc" expl="VC for fold_left" proved="true">
 <proof prover="3"><result status="valid" time="0.047638" steps="41"/></proof>
 </goal>
 <goal name="fold_left_app&#39;vc" expl="VC for fold_left_app" proved="true">
 <proof prover="3"><result status="valid" time="0.052025" steps="58"/></proof>
 </goal>
 <goal name="fold_left_map_r&#39;vc" expl="VC for fold_left_map_r" proved="true">
 <proof prover="1"><result status="timeout" time="2.000000" steps="146183"/></proof>
 <proof prover="3"><result status="timeout" time="2.000000" steps="34129"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="fold_left_map_r&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.039130" steps="32"/></proof>
  </goal>
  <goal name="fold_left_map_r&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.626368" steps="53326"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="ListFoldMonoid" proved="true">
 <goal name="fold_left_inv&#39;vc" expl="VC for fold_left_inv" proved="true">
 <proof prover="3"><result status="valid" time="0.073002" steps="176"/></proof>
 </goal>
 <goal name="fold_left_preserves&#39;vc" expl="VC for fold_left_preserves" proved="true">
 <proof prover="3"><result status="valid" time="0.045065" steps="70"/></proof>
 </goal>
 <goal name="fold_left_prop&#39;vc" expl="VC for fold_left_prop" proved="true">
 <proof prover="3"><result status="valid" time="0.071548" steps="182"/></proof>
 </goal>
 <goal name="fold_left_app_prop&#39;vc" expl="VC for fold_left_app_prop" proved="true">
 <proof prover="3"><result status="valid" time="0.064785" steps="153"/></proof>
 </goal>
</theory>
<theory name="ListFlatten" proved="true">
 <goal name="flatten_cons&#39;vc" expl="VC for flatten_cons" proved="true">
 <proof prover="3"><result status="valid" time="0.140091" steps="789"/></proof>
 </goal>
 <goal name="flatten_map&#39;vc" expl="VC for flatten_map" proved="true">
 <proof prover="3"><result status="valid" time="0.071439" steps="198"/></proof>
 </goal>
 <goal name="flatten_app&#39;vc" expl="VC for flatten_app" proved="true">
 <proof prover="3"><result status="valid" time="0.066858" steps="135"/></proof>
 </goal>
 <goal name="flatten_fequal" proved="true">
 <proof prover="3"><result status="valid" time="0.038115" steps="6"/></proof>
 </goal>
</theory>
<theory name="ListFlattenAlg" proved="true">
 <goal name="flatten_satisfies&#39;vc" expl="VC for flatten_satisfies" proved="true">
 <proof prover="3"><result status="valid" time="0.096269" steps="298"/></proof>
 </goal>
 <goal name="fold_left_flatten&#39;vc" expl="VC for fold_left_flatten" proved="true">
 <proof prover="1"><result status="valid" time="2.334282" steps="146034"/></proof>
 <proof prover="3"><result status="timeout" time="2.000000" steps="8656"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="fold_left_flatten&#39;vc.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.039035" steps="18"/></proof>
  </goal>
  <goal name="fold_left_flatten&#39;vc.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.069936" steps="161"/></proof>
  </goal>
  <goal name="fold_left_flatten&#39;vc.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.041835" steps="28"/></proof>
  </goal>
  <goal name="fold_left_flatten&#39;vc.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.038920" steps="28"/></proof>
  </goal>
  <goal name="fold_left_flatten&#39;vc.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.039989" steps="26"/></proof>
  </goal>
  <goal name="fold_left_flatten&#39;vc.5" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.039589" steps="26"/></proof>
  </goal>
  <goal name="fold_left_flatten&#39;vc.6" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.042702" steps="26"/></proof>
  </goal>
  <goal name="fold_left_flatten&#39;vc.7" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.045070" steps="26"/></proof>
  </goal>
  <goal name="fold_left_flatten&#39;vc.8" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.040592" steps="26"/></proof>
  </goal>
  <goal name="fold_left_flatten&#39;vc.9" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.454830" steps="2495"/></proof>
  </goal>
  <goal name="fold_left_flatten&#39;vc.10" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.041014" steps="34"/></proof>
  </goal>
  <goal name="fold_left_flatten&#39;vc.11" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.040880" steps="34"/></proof>
  </goal>
  <goal name="fold_left_flatten&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="1"><result status="timeout" time="2.000000" steps="122062"/></proof>
  <proof prover="3"><result status="timeout" time="2.000000" steps="16915"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="fold_left_flatten&#39;vc.12.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.048935" steps="59"/></proof>
   </goal>
   <goal name="fold_left_flatten&#39;vc.12.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.196138" steps="1106"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="ListSum" proved="true">
 <goal name="sum_cons&#39;vc" expl="VC for sum_cons" proved="true">
 <proof prover="3"><result status="valid" time="0.083551" steps="258"/></proof>
 </goal>
 <goal name="sum_app&#39;vc" expl="VC for sum_app" proved="true">
 <proof prover="3"><result status="valid" time="0.067139" steps="172"/></proof>
 </goal>
</theory>
<theory name="ListMaximum" proved="true">
 <goal name="maximum&#39;vc" expl="VC for maximum" proved="true">
 <proof prover="3"><result status="valid" time="0.052537" steps="113"/></proof>
 </goal>
 <goal name="maximum_cons" proved="true">
 <proof prover="1"><result status="valid" time="0.580325" steps="42021"/></proof>
 </goal>
</theory>
<theory name="ListFirstHomomorphismTheorem" proved="true">
 <goal name="fold_left_homomorphic&#39;vc" expl="VC for fold_left_homomorphic" proved="true">
 <proof prover="1"><result status="valid" time="1.263038" steps="88449"/></proof>
 </goal>
 <goal name="first_homomorphism_theorem&#39;vc" expl="VC for first_homomorphism_theorem" proved="true">
 <proof prover="1"><result status="timeout" time="2.000000" steps="125708"/></proof>
 <proof prover="3"><result status="timeout" time="2.000000" steps="18310"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="first_homomorphism_theorem&#39;vc.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.036146" steps="10"/></proof>
  </goal>
  <goal name="first_homomorphism_theorem&#39;vc.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.037634" steps="12"/></proof>
  </goal>
  <goal name="first_homomorphism_theorem&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="1.626481" steps="121310"/></proof>
  <proof prover="3"><result status="timeout" time="2.000000" steps="17610"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="first_homomorphism_theorem&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.043928" steps="38"/></proof>
   </goal>
   <goal name="first_homomorphism_theorem&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.567461" steps="50646"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="ListFirstnSkipn" proved="true">
 <goal name="cut&#39;vc" expl="VC for cut" proved="true">
 <proof prover="3"><result status="valid" time="0.273567" steps="1487"/></proof>
 </goal>
 <goal name="firstn&#39;vc" expl="VC for firstn" proved="true">
 <proof prover="3"><result status="valid" time="0.077448" steps="156"/></proof>
 </goal>
 <goal name="skipn&#39;vc" expl="VC for skipn" proved="true">
 <proof prover="3"><result status="valid" time="0.081219" steps="206"/></proof>
 </goal>
 <goal name="firstn_skipn&#39;vc" expl="VC for firstn_skipn" proved="true">
 <proof prover="3"><result status="valid" time="0.057237" steps="79"/></proof>
 </goal>
 <goal name="skipn_skipn&#39;vc" expl="VC for skipn_skipn" proved="true">
 <proof prover="3"><result status="valid" time="0.110686" steps="329"/></proof>
 </goal>
 <goal name="take&#39;vc" expl="VC for take" proved="true">
 <proof prover="3"><result status="valid" time="0.179274" steps="817"/></proof>
 </goal>
</theory>
<theory name="ListPrefix" proved="true">
 <goal name="prefix&#39;vc" expl="VC for prefix" proved="true">
 <proof prover="1"><result status="timeout" time="2.000000" steps="132973"/></proof>
 <proof prover="3"><result status="timeout" time="2.000000" steps="11731"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="prefix&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.044007" steps="51"/></proof>
  </goal>
  <goal name="prefix&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="1"><result status="timeout" time="2.000000" steps="140688"/></proof>
  <proof prover="3"><result status="timeout" time="2.000000" steps="7196"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="prefix&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.044448" steps="54"/></proof>
   </goal>
   <goal name="prefix&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.224792" steps="774"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prefix&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="1"><result status="timeout" time="2.000000" steps="131116"/></proof>
  <proof prover="3"><result status="timeout" time="2.000000" steps="7461"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="prefix&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.044514" steps="20"/></proof>
   </goal>
   <goal name="prefix&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.046530" steps="33"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="prefix_cons" proved="true">
 <proof prover="3"><result status="valid" time="0.984239" steps="3841"/></proof>
 </goal>
 <goal name="prefix_map&#39;vc" expl="VC for prefix_map" proved="true">
 <proof prover="3"><result status="valid" time="0.473449" steps="2411"/></proof>
 </goal>
 <goal name="prefix_satisfies&#39;vc" expl="VC for prefix_satisfies" proved="true">
 <proof prover="3"><result status="valid" time="0.067945" steps="102"/></proof>
 </goal>
</theory>
<theory name="ListFilter" proved="true">
 <goal name="filter_append&#39;vc" expl="VC for filter_append" proved="true">
 <proof prover="3"><result status="valid" time="0.073468" steps="192"/></proof>
 </goal>
</theory>
<theory name="ListZip" proved="true">
 <goal name="zip_length&#39;vc" expl="VC for zip_length" proved="true">
 <proof prover="3"><result status="valid" time="0.382457" steps="4523"/></proof>
 </goal>
 <goal name="zip_map2&#39;vc" expl="VC for zip_map2" proved="true">
 <proof prover="1"><result status="valid" time="0.515582" steps="53688"/></proof>
 </goal>
 <goal name="zip_nth" proved="true">
 <proof prover="3"><result status="valid" time="0.043102" steps="40"/></proof>
 </goal>
</theory>
<theory name="ListScan" proved="true">
 <goal name="scanl_spec&#39;vc" expl="VC for scanl_spec" proved="true">
 <proof prover="1"><result status="timeout" time="2.000000" steps="160545"/></proof>
 <proof prover="3"><result status="timeout" time="2.000000" steps="12258"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="scanl_spec&#39;vc.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.370056" steps="35974"/></proof>
  </goal>
  <goal name="scanl_spec&#39;vc.1" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.103929" steps="374"/></proof>
  </goal>
  <goal name="scanl_spec&#39;vc.2" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.741131" steps="71699"/></proof>
  </goal>
  <goal name="scanl_spec&#39;vc.3" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.696531" steps="69708"/></proof>
  </goal>
  <goal name="scanl_spec&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="1"><result status="timeout" time="2.000000" steps="155789"/></proof>
  <proof prover="3"><result status="timeout" time="2.000000" steps="11015"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="scanl_spec&#39;vc.4.0" expl="postcondition" proved="true">
   <proof prover="1" timelimit="32" memlimit="4000"><result status="valid" time="7.931858" steps="393605"/></proof>
   </goal>
   <goal name="scanl_spec&#39;vc.4.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.733744" steps="4832"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="scanl_nth&#39;vc" expl="VC for scanl_nth" proved="true">
 <proof prover="3"><result status="valid" time="0.053912" steps="35"/></proof>
 </goal>
 <goal name="scanl_snoc&#39;vc" expl="VC for scanl_snoc" proved="true">
 <proof prover="1"><result status="valid" time="1.554705" steps="125365"/></proof>
 <proof prover="3"><result status="timeout" time="2.000000" steps="14669"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="scanl_snoc&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.557453" steps="53810"/></proof>
  </goal>
  <goal name="scanl_snoc&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.485500" steps="49962"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="scanl_length&#39;vc" expl="VC for scanl_length" proved="true">
 <proof prover="3"><result status="valid" time="0.048805" steps="37"/></proof>
 </goal>
 <goal name="scanl_cons" proved="true">
 <proof prover="1"><result status="valid" time="0.293569" steps="33034"/></proof>
 </goal>
</theory>
<theory name="ListScanMonoid" proved="true">
 <goal name="map_scanl&#39;vc" expl="VC for map_scanl" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="map_scanl&#39;vc.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.860598" steps="81972"/></proof>
  </goal>
  <goal name="map_scanl&#39;vc.1" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.033216" steps="18"/></proof>
  </goal>
  <goal name="map_scanl&#39;vc.2" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.977943" steps="139554"/></proof>
  </goal>
  <goal name="map_scanl&#39;vc.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.453595" steps="138507"/></proof>
  </goal>
  <goal name="map_scanl&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="1" timelimit="8" memlimit="4000"><result status="valid" time="2.835321" steps="197714"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="scanl_inv&#39;vc" expl="VC for scanl_inv" proved="true">
 <proof prover="1"><result status="timeout" time="2.000000" steps="136449"/></proof>
 <proof prover="3"><result status="timeout" time="2.000000" steps="13739"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="scanl_inv&#39;vc.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.013303" steps="112556"/></proof>
  <proof prover="3"><result status="timeout" time="2.000000" steps="14015"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="scanl_inv&#39;vc.0.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.774737" steps="70759"/></proof>
   </goal>
   <goal name="scanl_inv&#39;vc.0.1" expl="VC for scanl_inv" proved="true">
   <proof prover="1"><result status="valid" time="0.615402" steps="58606"/></proof>
   </goal>
   <goal name="scanl_inv&#39;vc.0.2" expl="VC for scanl_inv" proved="true">
   <proof prover="1" timelimit="8" memlimit="4000"><result status="valid" time="1.068333" steps="85917"/></proof>
   </goal>
   <goal name="scanl_inv&#39;vc.0.3" expl="VC for scanl_inv" proved="true">
   <proof prover="1" timelimit="8" memlimit="4000"><result status="valid" time="2.680413" steps="141929"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="scanl_inv&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="1"><result status="timeout" time="2.000000" steps="132834"/></proof>
  <proof prover="3"><result status="timeout" time="2.000000" steps="12586"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="scanl_inv&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.159447" steps="677"/></proof>
   </goal>
   <goal name="scanl_inv&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="1" timelimit="8" memlimit="4000"><result status="valid" time="1.912473" steps="127781"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="scanl_map_gen&#39;vc" expl="VC for scanl_map_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="scanl_map_gen&#39;vc.0" expl="assertion" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.835670" steps="81772"/></proof>
  </goal>
  <goal name="scanl_map_gen&#39;vc.1" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="scanl_map_gen&#39;vc.1.0" expl="assertion" proved="true">
   <proof prover="1" timelimit="30" memlimit="4000"><result status="valid" time="5.562307" steps="480475"/></proof>
   </goal>
   <goal name="scanl_map_gen&#39;vc.1.1" expl="assertion" proved="true">
   <proof prover="1" timelimit="8" memlimit="4000"><result status="valid" time="6.364952" steps="512135"/></proof>
   </goal>
   <goal name="scanl_map_gen&#39;vc.1.2" expl="assertion" proved="true">
   <proof prover="3"><result status="valid" time="0.054991" steps="165"/></proof>
   </goal>
   <goal name="scanl_map_gen&#39;vc.1.3" expl="assertion" proved="true">
   <proof prover="3"><result status="valid" time="0.055732" steps="213"/></proof>
   </goal>
   <goal name="scanl_map_gen&#39;vc.1.4" expl="VC for scanl_map_gen" proved="true">
   <proof prover="1" timelimit="30" memlimit="4000"><result status="valid" time="15.308121" steps="627638"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="scanl_map_gen&#39;vc.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.031418" steps="22"/></proof>
  </goal>
  <goal name="scanl_map_gen&#39;vc.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.051040" steps="201"/></proof>
  </goal>
  <goal name="scanl_map_gen&#39;vc.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.031700" steps="24"/></proof>
  </goal>
  <goal name="scanl_map_gen&#39;vc.5" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.029149" steps="24"/></proof>
  </goal>
  <goal name="scanl_map_gen&#39;vc.6" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.032400" steps="24"/></proof>
  </goal>
  <goal name="scanl_map_gen&#39;vc.7" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.053923" steps="210"/></proof>
  </goal>
  <goal name="scanl_map_gen&#39;vc.8" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.045254" steps="24"/></proof>
  </goal>
  <goal name="scanl_map_gen&#39;vc.9" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.060774" steps="290"/></proof>
  </goal>
  <goal name="scanl_map_gen&#39;vc.10" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.030712" steps="26"/></proof>
  </goal>
  <goal name="scanl_map_gen&#39;vc.11" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.029236" steps="26"/></proof>
  </goal>
  <goal name="scanl_map_gen&#39;vc.12" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.029340" steps="26"/></proof>
  </goal>
  <goal name="scanl_map_gen&#39;vc.13" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.064699" steps="310"/></proof>
  </goal>
  <goal name="scanl_map_gen&#39;vc.14" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.101279" steps="502"/></proof>
  </goal>
  <goal name="scanl_map_gen&#39;vc.15" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.568585" steps="62193"/></proof>
  </goal>
  <goal name="scanl_map_gen&#39;vc.16" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.108448" steps="530"/></proof>
  </goal>
  <goal name="scanl_map_gen&#39;vc.17" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="scanl_map_gen&#39;vc.17.0" expl="assertion" proved="true">
   <proof prover="3"><result status="valid" time="0.140754" steps="593"/></proof>
   </goal>
   <goal name="scanl_map_gen&#39;vc.17.1" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.590138" steps="62911"/></proof>
   </goal>
   <goal name="scanl_map_gen&#39;vc.17.2" expl="assertion" proved="true">
   <proof prover="1" timelimit="8" memlimit="4000"><result status="valid" time="5.001663" steps="394350"/></proof>
   </goal>
   <goal name="scanl_map_gen&#39;vc.17.3" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="map_map">
   </transf>
   </goal>
   <goal name="scanl_map_gen&#39;vc.17.4" expl="VC for scanl_map_gen" proved="true">
   <proof prover="1" timelimit="8" memlimit="4000"><result status="valid" time="5.135169" steps="366477"/></proof>
   </goal>
   <goal name="scanl_map_gen&#39;vc.17.5" expl="VC for scanl_map_gen" proved="true">
   <transf name="apply" proved="true" arg1="map_ext_inv" arg2="with" arg3="inv">
    <goal name="scanl_map_gen&#39;vc.17.5.0" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="0.760870" steps="63249"/></proof>
    </goal>
    <goal name="scanl_map_gen&#39;vc.17.5.1" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.194350" steps="615"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="scanl_map_gen&#39;vc.17.6" expl="VC for scanl_map_gen" proved="true">
   <transf name="rewrite" proved="true" arg1="H1">
    <goal name="scanl_map_gen&#39;vc.17.6.0" expl="VC for scanl_map_gen" proved="true">
    <transf name="rewrite" proved="true" arg1="H">
     <goal name="scanl_map_gen&#39;vc.17.6.0.0" expl="VC for scanl_map_gen" proved="true">
     <proof prover="3"><result status="valid" time="0.032187" steps="34"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="scanl_map_gen&#39;vc.17.7" expl="VC for scanl_map_gen" proved="true">
   <transf name="rewrite" proved="true" arg1="H1">
    <goal name="scanl_map_gen&#39;vc.17.7.0" expl="VC for scanl_map_gen" proved="true">
    <transf name="rewrite" proved="true" arg1="H">
     <goal name="scanl_map_gen&#39;vc.17.7.0.0" expl="VC for scanl_map_gen" proved="true">
     <proof prover="3"><result status="valid" time="0.031049" steps="34"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="scanl_map_gen&#39;vc.17.8" expl="VC for scanl_map_gen" proved="true">
   <transf name="rewrite" proved="true" arg1="H1">
    <goal name="scanl_map_gen&#39;vc.17.8.0" expl="VC for scanl_map_gen" proved="true">
    <transf name="rewrite" proved="true" arg1="H">
     <goal name="scanl_map_gen&#39;vc.17.8.0.0" expl="VC for scanl_map_gen" proved="true">
     <proof prover="3" timelimit="5"><result status="valid" time="0.037737" steps="34"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="scanl_map_gen&#39;vc.18" expl="postcondition" proved="true">
  <proof prover="1" timelimit="1"><result status="timeout" time="1.000000" steps="71887"/></proof>
  <proof prover="3" timelimit="1"><result status="timeout" time="1.000000" steps="6806"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="scanl_map_gen&#39;vc.18.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="1.303775" steps="96692"/></proof>
   </goal>
   <goal name="scanl_map_gen&#39;vc.18.1" expl="postcondition" proved="true">
   <proof prover="1" timelimit="30" memlimit="4000"><result status="valid" time="6.598814" steps="389545"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
<file format="whyml" proved="true">
<path name=".."/><path name="skeletons.mlw"/>
<theory name="Skeletons" proved="true">
 <goal name="map_par&#39;vc" expl="VC for map_par" proved="true">
 <proof prover="1"><result status="timeout" time="2.000000" steps="134240"/></proof>
 <proof prover="3"><result status="timeout" time="2.000000" steps="14185"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="map_par&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.077658" steps="128"/></proof>
  </goal>
  <goal name="map_par&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="1.349359" steps="8780"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="reduce_par&#39;vc" expl="VC for reduce_par" proved="true">
 <proof prover="1"><result status="timeout" time="2.000000" steps="167288"/></proof>
 <proof prover="3"><result status="timeout" time="2.000000" steps="8448"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="reduce_par&#39;vc.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.049822" steps="22"/></proof>
  </goal>
  <goal name="reduce_par&#39;vc.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.048125" steps="22"/></proof>
  </goal>
  <goal name="reduce_par&#39;vc.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.056554" steps="22"/></proof>
  </goal>
  <goal name="reduce_par&#39;vc.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.050558" steps="22"/></proof>
  </goal>
  <goal name="reduce_par&#39;vc.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.109810" steps="314"/></proof>
  </goal>
  <goal name="reduce_par&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="1" timelimit="8" memlimit="4000"><result status="valid" time="2.197701" steps="165103"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
<file format="whyml" proved="true">
<path name=".."/><path name="stdlib.mlw"/>
<theory name="Base" proved="true">
 <goal name="procs&#39;vc" expl="VC for procs" proved="true">
 <proof prover="3"><result status="valid" time="0.076650" steps="150"/></proof>
 </goal>
 <goal name="this&#39;vc" expl="VC for this" proved="true">
 <proof prover="3"><result status="valid" time="0.068561" steps="70"/></proof>
 </goal>
 <goal name="replicate&#39;vc" expl="VC for replicate" proved="true">
 <proof prover="3"><result status="valid" time="0.064838" steps="67"/></proof>
 </goal>
 <goal name="parfun&#39;vc" expl="VC for parfun" proved="true">
 <proof prover="3"><result status="valid" time="0.064116" steps="75"/></proof>
 </goal>
 <goal name="parfun2&#39;vc" expl="VC for parfun2" proved="true">
 <proof prover="3"><result status="valid" time="0.057447" steps="28"/></proof>
 </goal>
 <goal name="parfun3&#39;vc" expl="VC for parfun3" proved="true">
 <proof prover="3"><result status="valid" time="0.059799" steps="28"/></proof>
 </goal>
 <goal name="list_of_par&#39;vc" expl="VC for list_of_par" proved="true">
 <proof prover="3"><result status="valid" time="0.125768" steps="345"/></proof>
 </goal>
 <goal name="apply2&#39;vc" expl="VC for apply2" proved="true">
 <proof prover="3"><result status="valid" time="0.060292" steps="28"/></proof>
 </goal>
 <goal name="applyif&#39;vc" expl="VC for applyif" proved="true">
 <proof prover="3"><result status="valid" time="0.171199" steps="650"/></proof>
 </goal>
 <goal name="applyat&#39;vc" expl="VC for applyat" proved="true">
 <proof prover="3"><result status="valid" time="0.077592" steps="133"/></proof>
 </goal>
 <goal name="mask&#39;vc" expl="VC for mask" proved="true">
 <proof prover="3"><result status="valid" time="0.171794" steps="707"/></proof>
 </goal>
</theory>
<theory name="Comm" proved="true">
 <goal name="shift_pid_lt" proved="true">
 <proof prover="3"><result status="valid" time="0.058038" steps="28"/></proof>
 </goal>
 <goal name="shift_pid_ge" proved="true">
 <proof prover="3"><result status="valid" time="0.067848" steps="28"/></proof>
 </goal>
 <goal name="shift_id" proved="true">
 <proof prover="3"><result status="valid" time="0.073114" steps="75"/></proof>
 </goal>
 <goal name="shift&#39;vc" expl="VC for shift" proved="true">
 <proof prover="1"><result status="timeout" time="2.000000" steps="177194"/></proof>
 <proof prover="3"><result status="timeout" time="2.000000" steps="13503"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="shift&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="timeout" time="2.000000" steps="174079"/></proof>
  <proof prover="3"><result status="timeout" time="2.000000" steps="11467"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="shift&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.049713" steps="20"/></proof>
   </goal>
   <goal name="shift&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="1" timelimit="8" memlimit="4000"><result status="valid" time="3.588165" steps="375830"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="shift&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.053193" steps="20"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="shift_right&#39;vc" expl="VC for shift_right" proved="true">
 <proof prover="3"><result status="valid" time="0.128948" steps="359"/></proof>
 </goal>
 <goal name="shift_left&#39;vc" expl="VC for shift_left" proved="true">
 <proof prover="3"><result status="valid" time="0.126811" steps="398"/></proof>
 </goal>
 <goal name="totex&#39;vc" expl="VC for totex" proved="true">
 <proof prover="3"><result status="valid" time="0.112444" steps="289"/></proof>
 </goal>
 <goal name="total_exchange&#39;vc" expl="VC for total_exchange" proved="true">
 <proof prover="3"><result status="valid" time="1.251455" steps="8032"/></proof>
 </goal>
 <goal name="bcast_proj&#39;vc" expl="VC for bcast_proj" proved="true">
 <proof prover="3"><result status="valid" time="0.067664" steps="30"/></proof>
 </goal>
 <goal name="bcast_direct&#39;vc" expl="VC for bcast_direct" proved="true">
 <proof prover="1"><result status="valid" time="0.733069" steps="70512"/></proof>
 </goal>
 <goal name="gather&#39;vc" expl="VC for gather" proved="true">
 <proof prover="3"><result status="valid" time="1.514972" steps="9171"/></proof>
 </goal>
 <goal name="gather_list&#39;vc" expl="VC for gather_list" proved="true">
 <proof prover="1"><result status="timeout" time="1.656721" steps="128776"/></proof>
 <proof prover="3"><result status="timeout" time="2.000000" steps="14195"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="gather_list&#39;vc.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.058815" steps="16"/></proof>
  </goal>
  <goal name="gather_list&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="1" timelimit="8" memlimit="4000"><result status="valid" time="2.335268" steps="177779"/></proof>
  </goal>
  <goal name="gather_list&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="1" timelimit="8" memlimit="4000"><result status="valid" time="1.251672" steps="118805"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="scatter&#39;vc" expl="VC for scatter" proved="true">
 <proof prover="1"><result status="timeout" time="2.000000" steps="157007"/></proof>
 <proof prover="3"><result status="timeout" time="2.000000" steps="14314"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="scatter&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="1" timelimit="32" memlimit="4000"><result status="valid" time="5.353743" steps="280429"/></proof>
  </goal>
  <goal name="scatter&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.050495" steps="14"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
