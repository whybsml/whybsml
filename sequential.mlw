(** {1 Library of sequential functions and their properties} *)


(** {2 On Integers} *)

module Int 
  use export int.Int
  use export int.EuclideanDivision

  let function max (x: int) (y: int): int 
    ensures { result = x \/ result = y }
    ensures { result >= x /\ result >= y }
  = if x < y then y else x 

  let function min (x: int) (y: int): int 
    ensures { result = x \/ result = y }
    ensures { result <= x /\ result <= y }
  = if x < y then x else y

end

(** {2 Basic Algebra} *)

module Algebra
  use list.List
  use list.Length
  use list.NthNoOpt
  use Int

  predicate associative (inv: 'a->bool)(op: 'a->'a->'a) = 
    forall x y z:'a. inv x -> inv y -> inv z ->
      op x (op y z) = op (op x y) z
  
  predicate neutral (inv: 'a->bool)(op: 'a->'a->'a)(e: 'a) =
    (forall x:'a. inv x -> op x e = x) /\ 
    (forall x:'a. inv x -> op e x = x)
   
  predicate preserves (inv: 'a->bool)(op: 'a->'a->'a) = 
    forall x y: 'a. inv x -> inv y -> inv (op x y)

  predicate satisfies (inv: 'a->bool)(xs: list 'a) = 
    forall i:int. 0 <= i < length xs -> inv (nth i xs)
    
  lemma tail_satisfies_aux:
    forall inv: 'a->bool, x:'a, xs: list 'a, i:int.  
      0 <= i < length xs -> 
      inv(nth i xs) = inv(nth (i+1) (Cons x xs))
    
  lemma tail_satisfies:
    forall inv: 'a ->bool, x:'a, xs: list 'a.
    satisfies inv (Cons x xs) -> satisfies inv xs

  lemma tail_satisfies_head:
    forall inv: 'a ->bool, x:'a, xs: list 'a.
    satisfies inv (Cons x xs) -> inv x

  lemma max_assoc: associative (fun (_:int)->true) max
  
  lemma add_assoc: associative (fun (_:int)->true) (+) 
  
  lemma add_neutral: neutral (fun (_:int)->true) (+) 0

  lemma max_add_distr: forall x y z: int. 
      x + max y z = max (x+y) (x+z)

end

(** {2 The option Type} *)

module Option
  use export option.Option

  val function remove_option(opt: option 'a): 'a   

  axiom remove_option: forall x: 'a. remove_option(Some x) = x
end

(** {2 Projections on Pairs} *)

module Pair

  (** `fst (x,y) = x` *)
  
  let function fst (v: ('a, 'b)): 'a 
  = match v with 
    | (x, _) -> x
    end

  (** `snd (x,y) = y` *)

  let function snd (v: ('a, 'b)): 'b
  = match v with 
    | (_, y) -> y
    end

end

(** {2 Curry and Uncurry} *)

module CurryUncurry 
  
  let function curry (f: 'a->'b->'c)(v: ('a,'b)): 'c 
  = match v with (x,y) -> f x y end 

  let uncurry (f: ('a,'b)->'c)(a: 'a)(b: 'b): 'c
  = f(a,b)

end 

(** {2 Compositions} *)

module Composition 
  
  let (:@:) (f: 'b->'c)(g: 'a ->'b)(x: 'a) 
  = f(g x) 

  let (:^:) (f: 'a->'b)(g: 'a ->'c)(x: 'a): ('b, 'c) 
  = (f x, g x)

  let (:*:) (f: 'a->'c)(g: 'b ->'d)(v: ('a,'b)): ('c,'d) 
  = match v with (x,y) -> (f x, g y) end

end 

(** {2 Lists} *)

(** {3 Basic definitions, properties and notation for lists} *)

module ListBasic 
  use export list.List 
  use export list.Length
  use export list.NthNoOpt
  use Int
    
  (** An alias for the non-optional `nth` in `list.NthNoOpt`. *)

  function ([])(xs: list 'a)(i: int): 'a = nth i xs
  
end

(** {3 List extensionality} *)

module ListExtensionality 
  use ListBasic
  use Int

  let rec lemma extensionality (xs ys: list 'a)
     requires { length xs = length ys }
     requires { forall i: int. 0 <= i < length xs -> xs[i] = ys[i] }
     ensures { xs = ys }
     variant { xs }
  = match xs with 
    | Nil -> ()
    | Cons _ xs' -> 
      match ys with 
      | Nil -> absurd 
      | Cons _ ys -> 
        let _ = assert { forall i:int. 0<=i<length xs'-> xs'[i]=xs[i+1] } in
        extensionality xs' ys
      end
    end  
    
end

(** {3 Append} *)

module ListAppend 
  use export list.Append
  use ListBasic
  use Algebra
  use Int
  
  lemma app_cons: 
    forall x: 'a, xs ys: list 'a. 
      (Cons x xs) ++ ys = Cons x (xs++ys)  
      
  let rec lemma app_satisfies (inv: 'a->bool)(xs ys: list 'a)
    requires { satisfies inv xs }
    requires { satisfies inv ys }
    ensures { satisfies inv (xs++ys) } 
  = match xs with 
    | Nil -> ()
    | Cons _ xs -> app_satisfies inv xs ys
    end   
    
  lemma app_assoc: 
    associative (fun (_:list 'a)->true) (++)

  lemma app_neutral: 
    neutral (fun (_:list 'a) -> true) (++) Nil

  let rec lemma nth_append_left (xs ys: list 'a)(i: int)
    requires { 0 <= i < length xs }
    ensures { (xs++ys)[i] = xs[i] }
  = match xs with
    | Nil -> ()
    | Cons _ xs ->
      if i = 0
      then ()
      else nth_append_left xs ys (i-1)
    end
	  
  let rec lemma nth_append_right (xs ys: list 'a)(i: int)
    requires { length xs <= i < length (xs++ys) }
    ensures { (xs++ys)[i] = ys[i-length xs] }
  = match xs with 
	  | Nil -> ()
	  | Cons _ xs -> 
	    if i = 0 
	    then ()
	    else nth_append_right xs ys (i-1)
	  end

end

(** {3 Init and applications} *)
  
module ListInit
  use ListBasic
  use ListAppend
  use Int

  let rec function init_aux (start: int)(size: int)(f: int ->'a): list 'a
    ensures { forall i:int. 0 <= i < length result -> result[i] = f (start+i) }
    ensures { length result = max 0 size } 
    variant { size }
  = if size <= 0 
    then Nil 
    else Cons (f start) (init_aux (start+1) (size-1) f)

  (** `init size f` creates a list of length `size` such that its element at 
      position `n` with `0 <= n < size` is `(f n)`. *)

  let rec function init (size: int)(f: int ->'a): list 'a 
    ensures { forall i:int. 0 <= i < length result -> result[i] = f i }
    ensures { length result = max 0 size } 
  = init_aux 0 size f

  (** `from_to n1 n2` creates the list `[n1; ... ; n2]`. *) 

  let rec function from_to (start: int)(finish: int): list int 
    ensures { start > finish -> length result = 0 }
    ensures { start <= finish -> length result = finish - start + 1 }
    ensures { forall i:int. 0 <= i < length result -> result[i] = start + i }
    variant { finish - start }
  = init_aux start (finish-start+1) (fun i->i)

   let rec lemma from_to_succ (start finish: int)
    requires { start <= finish } 
    ensures { from_to start finish = 
              (from_to start (finish - 1)) ++ Cons finish Nil }
    variant { finish - start }
  = if finish <= start
    then ()
    else from_to_succ (start+1) finish 

end

(** {3 Rev} *)

module ListRev
  use ListBasic
  use ListAppend
  use Int
  
  let rec rev_aux (xs acc: list 'a): list 'a 
    ensures { length result = length xs + length acc }
    ensures { forall i:int. 0 <= i < length xs -> 
                        result[i] = xs[length xs - 1 - i] }
    ensures { forall i:int. 0 <= i < length acc -> 
                        result[length xs + i] = acc[i] }
    variant { xs }
  = match xs with 
    | Nil -> acc
    | Cons x' xs' -> 
      assert { forall i:int. 0 <= i < length acc -> 
                        acc[i] = (Cons x' acc)[i+1] };
      rev_aux xs' (Cons x' acc)
    end 
    
  let rec rev (xs: list 'a): list 'a 
    ensures { length result = length xs }
    ensures { forall i:int. 0 <= i < length xs -> 
                        result[i] = xs[length xs - 1 - i] }
  = rev_aux xs Nil 
 
end 
 
(** {3 Map} *)

module ListMap
  use ListBasic
  use ListAppend
  use Int

  let rec function map (f: 'a -> 'b) (xs: list 'a): list 'b 
    ensures { length result = length xs }
    ensures { forall i:int. 0 <= i < length xs -> result[i] = f (xs[i]) }
    variant { xs }
  = match xs with 
    | Nil -> Nil
    | Cons x xs -> Cons (f x) (map f xs)
    end
    
  let rec lemma map_ext (f g: 'a->'b)(xs: list 'a) 
    requires { forall x: 'a. f x = g x }
    ensures { map f xs = map g xs } 
  = match xs with 
    | Nil -> ()
    | Cons _ xs -> map_ext f g xs
    end

  let rec lemma map_map (f: 'b->'c)(g: 'a->'b)(xs: list 'a)
    ensures { map f (map g xs) = map (fun x->f(g x)) xs }
  = match xs with 
    | Nil -> ()
    | Cons _ xs -> map_map f g xs
    end

  let rec lemma map_app (f: 'a->'b)(xs ys: list 'a)
    ensures { map f (xs++ys) = (map f xs)++(map f ys) }
  = match xs with 
    | Nil -> ()
    | Cons _ xs -> map_app f xs ys
    end
    
  lemma map_cons: 
    forall f:'a ->'b, x: 'a, xs: list 'a. 
      map f (Cons x xs) = Cons (f x)(map f xs)

end 

module ListMapAlg
  use Int
  use ListBasic
  use Algebra
  use ListMap
  
  let rec lemma map_ext_inv (inv: 'a->bool)(f g: 'a->'b)(xs: list 'a) 
    requires { satisfies inv xs }
    requires { forall x: 'a. inv x -> f x = g x }
    ensures { map f xs = map g xs } 
  = match xs with 
    | Nil -> ()
    | Cons _ xs -> map_ext_inv inv f g xs
    end
  
end 

(** {3 Tail recursive map } *)

module ListTailRecMap
  use ListBasic
  use ListMap
  use ListRev
  use ListExtensionality
  use Int
  
  let rec function map_aux (f: 'a -> 'b)(xs: list 'a)(acc: list 'b): list 'b 
    ensures { length result = length xs + length acc }
    ensures { forall i:int. 0 <= i < length xs -> 
                        result[i] = f (xs[length xs - 1 - i]) }
    ensures { forall i:int. 0 <= i < length acc -> 
                        result[length xs + i] = acc[i] }
    variant { xs }
  = match xs with 
    | Nil -> acc
    | Cons x' xs' -> 
      assert { forall i:int. 0<=i<length acc -> 
                        acc[i] = (Cons (f x') acc)[i+1] };
      map_aux f xs' (Cons (f x') acc)
    end 
    
  let function map' (f: 'a -> 'b)(xs: list 'a): list 'b 
    ensures { length result = length xs }
    ensures { forall i:int. 0 <= i < length xs -> result[i] = f (xs[i]) }
  = rev(map_aux f xs Nil)
  
  lemma map'_map:
    forall f: 'a -> 'b, xs: list 'a.
    map f xs = map' f xs
  
end

(** {3 Map2} *)

module ListMap2
  use ListBasic
  use Int
  
  let rec function map2 (f: 'a->'b->'c)(xs: list 'a)(ys: list 'b): list 'c
    ensures { length result = min (length xs) (length ys) }
    ensures { forall i:int. 0 <= i < length result -> 
                result[i] = f (xs[i])(ys[i]) }
    variant { xs }
  = match xs, ys with 
    | Nil, _ -> Nil
    | _, Nil -> Nil
    | Cons x xs, Cons y ys -> Cons (f x y) (map2 f xs ys)
    end

end

(** {3 Map3} *)

module ListMap3
  use ListBasic
  use Int
  
  let rec function map3 (f: 'a->'b->'c->'d)
      (xs: list 'a)(ys: list 'b)(zs: list 'c): list 'd
    ensures { length result = min (length xs) (min (length ys) (length zs)) }
    ensures { forall i:int. 0 <= i < length result -> 
                result[i] = f (xs[i])(ys[i])(zs[i]) }
    variant { xs }
  = match xs, ys, zs with 
    | Nil, _, _ -> Nil
    | _, Nil, _ -> Nil
    | _, _, Nil -> Nil
    | Cons x xs, Cons y ys, Cons z zs -> Cons (f x y z) (map3 f xs ys zs)
    end
  
end

(** {3 Folds} *)

module ListFold
  use ListBasic
  use ListAppend
  use ListMap

  let rec function fold_left (f: 'a ->'b->'a)(e: 'a)(xs: list 'b): 'a
    variant { xs } 
  = match xs with 
    | Nil -> e
    | Cons x xs -> fold_left f (f e x) xs 
    end 
    
  let rec lemma fold_left_app (op: 'a->'a->'a)(e: 'a)
    (xs ys: list 'a)
    ensures { fold_left op e (xs++ys) = 
              fold_left op (fold_left op e xs) ys } 
  = match xs with 
    | Nil -> ()
    | Cons x xs -> fold_left_app op (op e x) xs ys
    end 
    
  let rec lemma fold_left_map_r (xs: list 'c) 
    (f: 'a->'b->'a) (g: 'c->'b)
    ensures { forall a: 'a.
      fold_left (fun a b -> f a (g b)) a xs = 
      fold_left f a (map g xs) }
  = match xs with 
    | Nil -> ()
    | Cons _ xs -> fold_left_map_r xs f g
    end 
    
end

(** {3 Folds when the operator forms a monoid} *)

module ListFoldMonoid
  use list.Append
  use ListFold  
  use ListBasic
  use Algebra
  use Int
    
  let rec lemma fold_left_inv (inv: 'a->bool)
      (op: 'a->'a->'a)(x: 'a)(xs: list 'a)
    requires { inv x /\ forall i:int. 0<=i<length xs->inv (xs[i]) }
    requires { preserves inv op }
    ensures { inv (fold_left op x xs) }
  = match xs with 
    | Nil -> ()
    | Cons x' xs' -> 
        let _ = assert { forall i:int. 0<=i<length xs'-> xs'[i] = xs[i+1] } in
        fold_left_inv inv op (op x x') xs' 
    end  
    
  let rec lemma fold_left_preserves     
      (inv: 'a->bool)(op: 'a->'a->'a)(a: 'a)(xs: list 'a)
    requires { inv a /\ satisfies inv xs }
    requires { preserves inv op }
    ensures { inv (fold_left op a xs) } 
  = match xs with 
    | Nil -> ()
    | Cons x xs -> fold_left_preserves inv op (op x a) xs
    end
       
  let rec lemma fold_left_prop (inv: 'a->bool)
      (op: 'a->'a->'a)(a b: 'a)(xs: list 'a)
    requires { inv a /\ inv b /\ satisfies inv xs }
    requires { associative inv op }
    requires { preserves inv op }
    ensures  { fold_left op (op a b) xs = op a (fold_left op b xs) }
  = match xs with
    | Nil -> ()
    | Cons x' xs' ->
      assert { forall i:int. 0<=i<length xs' -> xs'[i] = xs[i+1] };
      fold_left_prop inv op (op a b) x' xs';
      fold_left_prop inv op b x' xs' 
    end
  
  let lemma fold_left_app_prop (x: list 'a)(xs: list(list 'a)) 
    ensures { fold_left (++) (x ++ Nil) xs =
              x ++ fold_left (++) Nil xs } 
  = fold_left_prop (fun _->true) (++) x Nil xs
  
end

(** {3 Flatten} *)

module ListFlatten
  use ListBasic
  use ListFold
  use ListFoldMonoid
  use ListAppend
  use ListMap
  use Int

  let function flatten (xs:list(list 'a)): list 'a = 
    fold_left (++) Nil xs
           
  let rec lemma flatten_cons (x: list 'a)(xs: list(list 'a))
    ensures { flatten(Cons x xs) = x ++ (flatten xs) }
  = fold_left_app_prop x xs
  
  let rec lemma flatten_map (f: 'a ->'b)(xs: list(list 'a))  
    ensures { flatten(map (map f) xs) = map f (flatten xs) }
  = match xs with 
    | Nil -> ()
    | Cons _ xs -> flatten_map f xs
    end
    
  let rec lemma flatten_app (xs ys: list(list 'a))  
    ensures { flatten (xs ++ ys) = (flatten xs) ++ (flatten ys) }
  = match xs with 
    | Nil -> ()
    | Cons _ xs -> flatten_app xs ys
    end
    
  lemma flatten_fequal:
    forall xs ys: list(list 'a). 
      xs = ys -> flatten xs = flatten ys

end

(** {3 Flatten properties using algebraic properties} *)

module ListFlattenAlg
  use ListBasic
  use ListFold
  use ListFoldMonoid
  use ListAppend
  use ListMap
  use ListFlatten
  use Algebra
  use Int

  let rec lemma flatten_satisfies (inv: 'a->bool)(xss: list(list 'a)) 
    requires { forall i:int. 0 <= i < length xss -> 
                        satisfies inv (xss[i]) }
    ensures { satisfies inv (flatten xss) } 
  = match xss with 
    | Nil -> ()
    | Cons xs' xss' -> 
      let _ = assert { flatten xss = xs' ++ flatten xss' } in 
      let _ = assert { forall i:int. 0 <= i < length xss' -> 
                                satisfies inv (xss'[i]) = 
                                satisfies inv (xss[i+1]) } in
      flatten_satisfies inv xss';
      let _ = assert { satisfies inv (flatten xss') } in
      let _ = assert { satisfies inv xs' } in
      ()
    end 
    
  let rec lemma fold_left_flatten (inv: 'a->bool)
      (op: 'a->'a->'a)(e: 'a)(xss: list(list 'a))
    requires { associative inv op }
    requires { neutral inv op e }
    requires { preserves inv op }
    requires { inv e }    
    requires { satisfies (satisfies inv) xss }
    ensures { fold_left op e (flatten xss) = 
              fold_left op e (map (fun xs->fold_left op e xs) xss) }
  = match xss with 
    | Nil -> ()
    | Cons xs xss -> 
        tail_satisfies (satisfies inv) xs xss;
        let ghost function f xs = fold_left op e xs in
        let ghost a = fold_left op e xs in
        flatten_cons xs xss;
        fold_left_prop inv op a e (flatten xss);
        fold_left_flatten inv op e xss;
        fold_left_prop inv op a e (map f xss)
    end

end

(** {3 Sum of a list of integers} *)

module ListSum
  use ListBasic
  use ListFold
  use ListFoldMonoid
  use ListAppend
  use Int
  
  let function sum (xs: list int): int = 
    fold_left (+) 0 xs
    
  let lemma sum_cons (x:int)(xs: list int) 
    ensures { sum (Cons x xs) = x + sum xs }
  = fold_left_prop (fun (_:int)->true) (+) x 0 xs

  let rec lemma sum_app (xs ys: list int)
    ensures { sum(xs++ys) = sum xs + sum ys }
  = match xs with 
    | Nil -> ()
    | Cons _ xs -> sum_app xs ys 
    end

end    
    
(** {3 Maximum of a non-empty list of integers} *)

module ListMaximum 
  use ListBasic
  use ListFold
  use ListFoldMonoid
  use Algebra
  use Int

  let rec function maximum (xs: list int): int 
    requires { length xs > 0 } 
    variant { xs }
  = match xs with 
    | Nil -> absurd
    | Cons h Nil -> h 
    | Cons h t -> max h (maximum t)
    end  
        
  lemma maximum_cons:
    forall x: int, xs: list int.
    length xs > 0 ->
    maximum (Cons x xs) = max x (maximum xs)

end  

(** {3 Homomorphisms and the first homomorphism theorem} *)
 
module ListFirstHomomorphismTheorem
  use ListBasic
  use ListAppend
  use ListMap
  use ListFold
  
  predicate homomorphic (h: list 'a->'b)(op: 'b->'b->'b) =
    forall xs ys: list 'a. h(xs++ys) = op(h xs)(h ys)

  let rec lemma fold_left_homomorphic
    (h: list 'a -> 'b)(op: 'b->'b->'b)
    (x:'a) (xs ys: list 'a)
    requires { homomorphic h op }
    ensures { 
      fold_left op (op(h (Cons x Nil)) (h ys)) 
        (map (fun x->h(Cons x Nil)) xs) =
      op (h(Cons x Nil))  
        (fold_left op (h ys) (map (fun x->h(Cons x Nil)) xs)) }
  = match xs with 
    | Nil -> ()
    | Cons head tail -> 
        fold_left_homomorphic h op x tail (ys++(Cons head Nil))
    end 
    
  let rec lemma first_homomorphism_theorem 
    (h: list 'a -> 'b)(op: 'b->'b->'b)(xs: list 'a)
    requires { homomorphic h op }
    ensures { h xs = fold_left op (h Nil) 
                      (map (fun x->h(Cons x Nil)) xs) }
  = match xs with 
    | Nil -> ()
    | Cons x xs -> 
        fold_left_homomorphic h op x xs Nil;
        first_homomorphism_theorem h op xs
    end

end

(** {3 Firstn and skipn} *)

module ListFirstnSkipn
  use ListBasic
  use ListAppend
  use ListExtensionality
  use Pair
  use Int
  use Algebra
  
  let rec cut (n: int)(xs: list 'a): (list 'a, list 'a)
    returns { ys, zs -> ys ++ zs = xs } 
    returns { ys, _ -> length ys = min (max 0 n) (length xs) }
    variant { n }
  = if n <= 0
    then (Nil,xs)
    else
      match xs with 
      | Nil -> (Nil, Nil)
      | Cons x xs ->
        let (xs,ys) = cut (n-1) xs
        in Cons x xs, ys
      end
	  
  let function firstn (n:int)(xs: list 'a) 
    requires { 0 <= n <= length xs }
    ensures { forall i:int. 0 <= i < n -> xs[i] = result [i] } 
    ensures { length result = n } 
  = fst (cut n xs)
  
  let function skipn (n:int)(xs: list 'a)
    requires { 0 <= n <= length xs }
    ensures { forall i:int. n <= i < length xs -> xs[i] = result[i-n] }
    ensures { length result = length xs - n }
  = snd (cut n xs)

  let rec lemma firstn_skipn (xs: list 'a)(n: int)
    requires { 0 <= n <= length xs }
    ensures { xs = (firstn n xs ) ++ (skipn n xs) }
  = extensionality xs ((firstn n xs)++(skipn n xs))  
  
  let lemma skipn_skipn (n1 n2: int)(xs: list 'a)
    requires { 0 <= n1 /\ 0 <= n2 }
    requires { n1 + n2 <= length xs }
    ensures { skipn n1 (skipn n2 xs) = skipn (n1+n2) xs }
  = ()
  
  let rec function take (n: int)(xs: list 'a): list 'a 
    ensures { length result = max 0 (min n (length xs)) }
    ensures { forall i:int. 0 <= i < length result -> 
                        result[i] = xs[i] }
    variant { xs }
  = if n <= 0 
    then Nil 
    else 
      match xs with  
      | Nil -> Nil
      | Cons x xs -> Cons x (take (n-1) xs)
      end

end

(** {3 Prefix} *)
  
module ListPrefix
  use ListBasic
  use ListMap
  use Int
  use ListFirstnSkipn
  use ListExtensionality
  use Algebra

  let rec function prefix (xs: list 'a)
    ensures { forall i:int. 0 <= i <= length xs -> 
                result[i] = firstn i xs }
    ensures { length result = 1 + length xs }
    variant { xs }
  = Cons (Nil) 
         (match xs with
          | Nil ->  Nil
          | Cons x xs -> map (fun xs->Cons x xs) (prefix xs)
          end)
          
  lemma prefix_cons: 
    forall x: int, xs: list int. 
      prefix (Cons x xs) = 
      Cons Nil (map (fun xs->Cons x xs) (prefix xs))
      
  let lemma prefix_map (xs: list 'a)(f: 'a->'b) 
    ensures { prefix (map f xs) = map (map f) (prefix xs) }
  = extensionality (prefix (map f xs)) (map (map f) (prefix xs))
  
  let lemma prefix_satisfies (inv: 'a->bool)(xs: list 'a)
    requires { satisfies inv xs } 
    ensures { satisfies (satisfies inv) (prefix xs) }
  = ()
        
end

(** {3 Filter} *)

module ListFilter
  use ListBasic
  use ListAppend

  let rec function filter (p: 'a -> bool)(xs: list 'a): list 'a 
  = match xs with 
    | Nil -> Nil 
    | Cons x' xs' -> 
      if p x' 
      then Cons x' (filter p xs')
      else filter p xs'
    end

  let rec lemma filter_append (p: 'a->bool)(xs ys: list 'a) 
    ensures { filter p (xs++ys) = filter p xs ++ filter p ys }
  = match xs with 
    | Nil -> ()   
    | Cons _ xs -> filter_append p xs ys 
    end 

end

(** {3 Zip} *)

module ListZip
  use Int 
  use ListBasic 
  use ListMap2

  let rec function zip (xs: list 'a)(ys: list 'b): list ('a,'b)
  = match (xs, ys) with 
    | Cons x xs, Cons y ys -> Cons (x,y) (zip xs ys)
    | _, Nil | Nil, _ -> Nil 
    end

  let rec lemma zip_length (xs: list 'a)(ys: list 'b) 
    ensures { length(zip xs ys) = min (length xs)(length ys) }
  = match xs with 
    | Nil -> () 
    | Cons _ xs -> 
      match ys with 
      | Nil -> ()
      | Cons _ ys -> zip_length xs ys
      end
    end

  let rec lemma zip_map2 (xs: list 'a)(ys: list 'b)
    ensures { zip xs ys = map2 (fun x y->(x,y)) xs ys }
  = match xs with 
    | Nil -> () 
    | Cons _ xs -> 
      match ys with 
      | Nil -> ()
      | Cons _ ys -> zip_map2 xs ys
      end
    end 
    
  lemma zip_nth: 
    forall xs: list 'a, ys: list 'b, i: int. 
    0 <= i < min (length xs) (length ys) -> 
    (zip xs ys)[i] = (xs[i], ys[i])

end

(** {3 Last} *)

theory ListLast
  use Int 
  use ListBasic 

  val function last (xs: list 'a): 'a
  
  axiom last_one: forall x: 'a. last (Cons x Nil) = x 

  axiom last_rec: forall xs: list 'a, x: 'a. 
    0 < length xs -> last (Cons x xs) = last xs 


  let rec function removelast (xs: list 'a): list 'a
  = match xs with 
    | Nil -> Nil 
    | Cons _ Nil -> Nil 
    | Cons x xs -> Cons x (removelast xs) 
    end 

end

 
(** {3 All on lists} *)

module List
  use export ListBasic
  use export ListExtensionality
  use export ListAppend
  use export ListInit
  use export ListRev
  use export ListMap
  use export ListTailRecMap
  use export ListFold
  use export ListFoldMonoid
  use export ListFlatten
  use export ListSum
  use export ListMaximum
  use export ListFirstHomomorphismTheorem
  use export ListFirstnSkipn
  use export ListPrefix
  use export ListZip
  use export ListLast
end
