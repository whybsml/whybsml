(** {1 Algorithmic Skeletons in BSML: map and reduce } *)

module Skeletons 

  use sequential.Int
  use sequential.ListBasic
  use sequential.ListAppend
  use sequential.ListMap
  use sequential.ListTailRecMap
  use sequential.ListFold
  use sequential.ListFoldMonoid
  use sequential.ListFlatten
  use bsml.BSML
  use stdlib.Base
  use sequential.Pair
  use sequential.Algebra

  (** Any homomorphic function can be implemented as a composition of 
      `map` and `reduce` (see `first_homomorphism_theorem` in 
      {h <a href="sequential.html#List_">sequential.List</a>}). map_par` 
      and `reduce_par` can be used to implement a parallel version of any 
      homomorphic function. The input of such parallel functions are 
      distributed lists, i.e. values of type `par(list 'a)`. *)

  let map_par (f: 'a->'b) (dl: par (list 'a)) : par (list 'b)
    ensures { forall i:int. 0 <= i < bsp_p ->
                       get result i = map f (get dl i) }
    ensures { to_list result = map f (to_list dl) }
  = let ghost _ = flatten_map f (list_of_par dl) in
    parfun (map' f) dl
    
  let reduce_par (ghost inv: 'a->bool)
    (op: 'a->'a->'a) (e: 'a) (dl: par(list 'a)) : 'a 
    requires { associative inv op }
    requires { neutral inv op e }
    requires { preserves inv op }
    requires { inv e }
    requires { forall i:int. 0 <= i < bsp_p -> 
                        satisfies inv (get dl i) }
    ensures { result = fold_left op e (to_list dl) }
  = let ghost _ = fold_left_flatten inv op e (list_of_par dl) in  
    let reduce_seq l = fold_left op e l in 
    let partial_reductions = parfun reduce_seq dl in 
    reduce_seq (list_of_par partial_reductions)
end