(** {1 Algorithmic Skeletons in BSML: map and reduce } *)

module Skeletons 

  use sequential.Int
  use sequential.ListBasic
  use sequential.ListAppend
  use sequential.ListMap
  use sequential.ListTailRecMap
  use sequential.ListFold
  use sequential.ListFoldMonoid
  use sequential.ListFlatten
  use sequential.ListFlattenAlg
  use bsml.BSML
  use stdlib.Base
  use sequential.Pair
  use sequential.Algebra

  (** Any homomorphic function can be implemented as a composition of 
      `map` and `reduce` (see `first_homomorphism_theorem` in 
      {h <a href="sequential.html#List_">sequential.List</a>}). `map_par` 
      and `reduce_par` or `mapreduce_par` can be used to implement a 
      parallel version of any homomorphic function. The input of such 
      parallel functions are distributed lists, i.e. values of type 
      `par(list 'a)`. *)

  (** {2 Parallel map} *)

  let map_par (f: 'a->'b)(dl: par (list 'a)): par (list 'b)
    ensures { forall i:int. 0 <= i < bsp_p ->
                       get result i = map f (get dl i) }
    ensures { to_list result = map f (to_list dl) }
  = let ghost _ = flatten_map f (list_of_par dl) in
    parfun (map' f) dl

  (** {2 Parallel reduce} *)
    
  let reduce_par (ghost inv: 'a->bool)
    (op: 'a->'a->'a)(e: 'a)(dl: par(list 'a)) : 'a 
    requires { associative inv op }
    requires { neutral inv op e }
    requires { preserves inv op }
    requires { inv e }
    requires { forall i:int. 0 <= i < bsp_p -> 
                        satisfies inv (get dl i) }
    ensures { result = fold_left op e (to_list dl) }
  = assert { fold_left op e (flatten (list_of_par dl)) = 
             fold_left op e (map (fun xs->fold_left op e xs) 
                                 (list_of_par dl)) };
    let reduce_seq l = fold_left op e l in 
    let partial_reductions = parfun reduce_seq dl in 
    reduce_seq (list_of_par partial_reductions)

  (** {2 Parallel mapreduce} *)

  let mapreduce_par (ghost inv: 'b->bool)
    (op: 'b->'b->'b)(f:'a->'b)(e: 'b) (dl: par(list 'a)) : 'b 
    requires { associative inv op }
    requires { neutral inv op e }
    requires { preserves inv op }
    requires { inv e }
    requires { forall i:int. 0 <= i < bsp_p -> 
                        satisfies inv (map f (get dl i)) }
    ensures { result = fold_left (fun x y->op x (f y)) e (to_list dl) }
  = assert { fold_left op e (flatten (map (map f)(list_of_par dl))) = 
             fold_left op e (map (fun xs->fold_left op e xs)
                                 (map (map f)(list_of_par dl))) };
    assert { forall b: 'b.
      fold_left (fun (x: 'b) (y: 'a) -> (op @ x) @ (f @ y)) b (to_list dl) =
      fold_left op b (map f (to_list dl)) };
    let op' (x: 'b)(y: 'a) = op x (f y) in
    let reduce_seq (l: list 'a): 'b = fold_left op' e l in 
    let partial_reductions = parfun reduce_seq dl in 
    assert { forall i. 0<=i<bsp_p -> 
      get partial_reductions i = fold_left op e (map f (get dl i)) };
    fold_left op e (list_of_par partial_reductions)
    
end